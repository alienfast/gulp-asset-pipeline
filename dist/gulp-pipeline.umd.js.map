{"version":3,"file":null,"sources":["../src/base.js","../src/util/file.js","../src/ruby/ruby.js","../src/ruby/rails.js","../src/preset.js","../src/baseGulp.js","../src/baseRecipe.js","../src/eslint.js","../src/uglify.js","../src/autoprefixer.js","../src/images.js","../src/sass.js","../src/scssLint.js","../src/aggregate.js","../src/rollupEs.js","../src/rollupCjs.js","../src/rollupCjsBundled.js","../src/rollupIife.js","../src/rollupAmd.js","../src/rollupUmd.js","../src/copy.js","../src/baseClean.js","../src/cleanImages.js","../src/cleanStylesheets.js","../src/cleanJavascripts.js","../src/cleanDigest.js","../src/util/recipes.js","../src/util/parallel.js","../src/clean.js","../src/util/clean.js","../src/rev.js","../src/revReplace.js","../src/cssNano.js","../src/baseMocha.js","../src/mocha.js","../src/mochaPhantomJs.js","../src/basePublish.js","../src/prepublish.js","../src/publishBuild.js","../src/publishNpm.js","../src/publishGhPages.js","../src/jekyll.js","../src/util/series.js","../src/util/tmpDir.js","../src/util/tmpDirName.js","../src/sleep.js","../src/util/sleep.js","../src/registry/baseRegistry.js","../src/registry/railsRegistry.js","../src/registry/railsEngineDummyRegistry.js"],"sourcesContent":["import extend from 'extend'\nimport Util from 'gulp-util'\nimport stringify from 'stringify-object'\nimport shelljs from 'shelljs'\n\nexport const Default = {\n  watch: true,\n  debug: false,\n  cwd: `${shelljs.pwd()}` // ensure a new string - not the string-like object which causes downstream errors on type === string\n}\n\nconst Base = class {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(...configs) {\n    this.config = extend(true, {}, Default, ...configs)\n    // this.debugDump(`[${this.constructor.name}] using resolved config`, this.config)\n  }\n\n  // ----------------------------------------------\n  // protected\n  requireValue(value, name) {\n    if (value === undefined || value == null) {\n      this.notifyError(`${name} must be defined, found: ${value}`)\n    }\n  }\n\n  log(msg) {\n    Util.log(msg)\n  }\n\n  debug(msg) {\n    if (this.config.debug) {\n      this.log(`[${Util.colors.cyan('debug')}][${Util.colors.cyan(this.constructor.name)}] ${msg}`)\n    }\n  }\n\n  debugDump(msg, obj) {\n    if (this.config.debug) {\n      this.debug(`${msg}:\\n${this.dump(obj)}`)\n    }\n  }\n\n  dump(obj) {\n    return stringify(obj)\n  }\n\n  notifyError(error, e) {\n    this.log(error)\n    throw e\n  }\n\n  /**\n   * Wraps shellJs calls that act on the file structure to give better output and error handling\n   * @param command\n   * @param logResult - return output from the execution, defaults to true. If false, will return code instead\n   * @param returnCode - defaults to false which will throw Error on error, true will return result code\n   */\n  exec(command, logResult = true) {\n    let options = {silent: true}\n    if (this.config.cwd) {\n      options['cwd'] = this.config.cwd\n    }\n    else {\n      this.notifyError('cwd is required')\n    }\n\n    if (command.includes(`undefined`)) {\n      this.notifyError(`Invalid command: ${command}`)\n    }\n\n    this.debug(`Executing \\`${command}\\` with cwd: ${options['cwd']}`)\n    let shellResult = shelljs.exec(command, options)\n    let output = this.logShellOutput(shellResult, logResult);\n\n    if (shellResult.code === 0 || shellResult.code === 1) {\n      return shellResult\n    }\n    else {\n      this.notifyError(`Command failed \\`${command}\\`, cwd: ${options.cwd}: ${output}.`)\n    }\n  }\n\n  logShellOutput(shellResult, logResult) {\n    //this.debug(`[exit code] ${shellResult.code}`)\n\n    // ---\n    // Log the result\n    // strangely enough, sometimes useful messages from git are an stderr even when it is a successful command with a 0 result code\n    let output = shellResult.stdout\n    if (output == '') {\n      output = shellResult.stderr\n    }\n\n    //this.log(stringify(shellResult))\n    if (output != '') {\n      if (logResult) {\n        this.log(output)\n      }\n      else {\n        this.debug(`[output] \\n${output}`)\n      }\n    }\n    return output;\n  }\n}\n\nexport default Base\n","import Base from '../base'\nimport fs from 'fs-extra'\nimport path from 'path'\nimport fileSyncCmp from 'file-sync-cmp'\nimport process from 'process'\nimport iconv from 'iconv-lite'\nimport {Buffer} from 'buffer'\nimport findup from 'findup-sync'\n\nconst isWindows = (process.platform === 'win32')\nconst pathSeparatorRe = /[\\/\\\\]/g;\n\n/**\n * Implementation can use our base class, but is exposed as static methods in the exported File class\n *\n * TODO: reducing the amount of code by using other maintained libraries would be fantastic.  Worst case, break most of this into it's own library?\n *\n *  @credit to grunt for the grunt.file implementation. See license for attribution.\n */\nconst FileImplementation = class extends Base {\n  constructor(config = {debug: false}) {\n    super({encoding: \"utf8\"}, config)\n  }\n\n  findup(glob, options = {}, fullPath = true) {\n    let f = findup(glob, options)\n    if(this.config.debug) {\n      this.debug(`findup-sync(${glob}, ${this.dump(options)}): ${this.dump(f)}`)\n    }\n    if (f && fullPath) {\n      return path.resolve(f)\n    }\n    else {\n      return f\n    }\n  }\n\n  // Read a file, optionally processing its content, then write the output.\n  copy(srcpath, destpath, options) {\n    if (!options) {\n      options = {}\n    }\n    // If a process function was specified, process the file's source.\n\n    // If the file will be processed, use the encoding as-specified. Otherwise, use an encoding of null to force the file to be read/written as a Buffer.\n    let readWriteOptions = options.process ? options : {encoding: null}\n\n    let contents = this.read(srcpath, readWriteOptions)\n    if (options.process) {\n      this.debug('Processing source...')\n      try {\n        contents = options.process(contents, srcpath)\n      }\n      catch (e) {\n        this.notifyError(`Error while executing process function on ${srcpath}.`, e)\n      }\n    }\n    // Abort copy if the process function returns false.\n    if (contents === false) {\n      this.debug('Write aborted, no contents.')\n    }\n    else {\n      this.write(destpath, contents, readWriteOptions)\n    }\n  }\n\n  syncTimestamp(src, dest) {\n    let stat = fs.lstatSync(src)\n    if (path.basename(src) !== path.basename(dest)) {\n      return\n    }\n\n    if (stat.isFile() && !fileSyncCmp.equalFiles(src, dest)) {\n      return\n    }\n\n    let fd = fs.openSync(dest, isWindows ? 'r+' : 'r')\n    fs.futimesSync(fd, stat.atime, stat.mtime)\n    fs.closeSync(fd)\n  }\n\n  write(filepath, contents, options) {\n    if (!options) {\n      options = {}\n    }\n    // Create path, if necessary.\n    this.mkdir(path.dirname(filepath))\n    try {\n      // If contents is already a Buffer, don't try to encode it. If no encoding was specified, use the default.\n      if (!Buffer.isBuffer(contents)) {\n        contents = iconv.encode(contents, options.encoding || this.config.encoding)\n      }\n      // Actually write this.\n      fs.writeFileSync(filepath, contents)\n\n      return true\n    }\n    catch (e) {\n      this.notifyError(`Unable to write ${filepath} file (Error code: ${e.code}).`, e)\n    }\n  }\n\n  // Read a file, return its contents.\n  read(filepath, options) {\n    if (!options) {\n      options = {}\n    }\n    let contents\n    this.debug(`Reading ${filepath}...`)\n    try {\n      contents = fs.readFileSync(String(filepath))\n      // If encoding is not explicitly null, convert from encoded buffer to a\n      // string. If no encoding was specified, use the default.\n      if (options.encoding !== null) {\n        contents = iconv.decode(contents, options.encoding || this.config.encoding)\n        // Strip any BOM that might exist.\n        if (!this.config.preserveBOM && contents.charCodeAt(0) === 0xFEFF) {\n          contents = contents.substring(1)\n        }\n      }\n\n      return contents\n    }\n    catch (e) {\n      this.notifyError('Unable to read \"' + filepath + '\" file (Error code: ' + e.code + ').', e)\n    }\n  }\n\n  /**\n   * Like mkdir -p. Create a directory and any intermediary directories.\n   * @param dirpath\n   * @param mode\n   */\n  mkdir(dirpath, mode) {\n    this.debug(`mkdir ${dirpath}:`)\n    // Set directory mode in a strict-mode-friendly way.\n    if (mode == null) {\n      mode = parseInt('0777', 8) & (~process.umask())\n    }\n    dirpath.split(pathSeparatorRe).reduce((parts, part) => {\n      parts += part + '/'\n      let subpath = path.resolve(parts)\n      if (!this.exists(subpath)) {\n        try {\n          this.debug(`\\tfs.mkdirSync(${subpath}, ${mode})`)\n          fs.mkdirSync(subpath, mode)\n        }\n        catch (e) {\n          this.notifyError(`Unable to create directory ${subpath} (Error code: ${e.code}).`, e)\n        }\n      }\n      else {\n        this.debug(`\\t${subpath} already exists`)\n      }\n      return parts\n    }, '')\n  }\n\n  /**\n   * Match a filepath or filepaths against one or more wildcard patterns.\n   * @returns true if any of the patterns match.\n   */\n  isMatch(...args) {\n    return this.match(...args).length > 0\n  }\n\n  exists(...args) {\n    let filepath = path.join(...args)\n    let result\n\n    try {\n      fs.statSync(filepath)\n      result = true\n    }\n    catch (error) {\n      result = false\n    }\n\n    this.debug(`exists(${filepath})? ${result}`)\n    return result\n  }\n\n  isDir(...args) {\n    let filepath = path.join(...args)\n    return this.exists(filepath) && fs.statSync(filepath).isDirectory()\n  }\n\n  detectDestType(dest) {\n    if (dest.endsWith('/')) {\n      return 'directory'\n    }\n    else {\n      return 'file'\n    }\n  }\n\n  modified(sourceFileName, targetFileName) {\n    let sourceStat = null\n    let targetStat = null\n    try {\n      sourceStat = fs.statSync(sourceFileName)\n      targetStat = fs.statSync(targetFileName)\n    }\n    catch (error) {\n      return true    // one file doesn't exist\n    }\n\n    this.debug(`modified mtime comparison a) ${sourceFileName} vs. b) ${targetFileName}\\n\\ta) ${sourceStat.mtime}\\n\\tb) ${targetStat.mtime}`)\n    if (sourceStat.mtime > targetStat.mtime) {\n      return true\n    }\n    else {\n      return false\n    }\n  }\n\n  delete(filename, ignoreError = false) {\n    try {\n      fs.unlinkSync(filename)\n    }\n    catch (error) {\n      if (!ignoreError) {\n        throw error\n      }\n    }\n  }\n}\n\n\nconst File = class {\n  static findup(glob, options = {}, fullPath = true) {\n    return instance.findup(glob, options, fullPath)\n  }\n\n  static copy(srcpath, destpath, options) {\n    return instance.copy(srcpath, destpath, options)\n  }\n\n  static syncTimestamp(src, dest) {\n    return instance.syncTimestamp(src, dest)\n  }\n\n  static write(filepath, contents, options) {\n    return instance.write(filepath, contents, options)\n  }\n\n  static read(filepath, options) {\n    return instance.read(filepath, options)\n  }\n\n  static isDir(...args) {\n    return instance.isDir(...args)\n  }\n\n  static mkdir(dirpath, mode) {\n    return instance.mkdir(dirpath, mode)\n  }\n\n  static isMatch(...args) {\n    return instance.isMatch(...args)\n  }\n\n  static exists(...args) {\n    return instance.exists(...args)\n  }\n\n  static detectDestType(dest) {\n    return instance.detectDestType(dest)\n  }\n\n  static modified(sourceFileName, targetFileName) {\n    return instance.modified(sourceFileName, targetFileName)\n  }\n\n  static delete(filename, ignoreError = false){\n    return instance.delete(filename, ignoreError)\n  }\n}\n\n//  singleton\nlet instance = new FileImplementation()\n\nexport default File\n","import path from 'path'\nimport File from '../util/file'\n\nconst Ruby = class {\n  static localPath(name) {\n    let filename = `${name}`\n\n    // if using source dir\n    let filepath = path.join(__dirname, filename) // eslint-disable-line no-undef\n    if(!File.exists(filepath)){\n\n      // if using dist dir, use the relative src/ruby path\n      filepath = path.join(__dirname, '../src/ruby', filename) // eslint-disable-line no-undef\n      if(!File.exists(filepath)) {\n        throw new Error(`Expected to find ${filepath}`)\n      }\n    }\n\n    return filepath\n  }\n}\n\nexport default Ruby\n","import Ruby from './ruby'\nimport path from 'path'\nimport glob from 'glob'\nimport jsonfile from 'jsonfile'\nimport console from 'console'\nimport File from '../util/file'\nimport Base from '../base'\n\nconst Files = {\n  CACHE: `.gulp-pipeline-rails.json`,\n  GEM_LOCK: `Gemfile.lock`\n}\nconst Rails = class extends Base {\n  constructor(config = {debug: false}) {\n    // We need a rails app to run our rails script runner.\n    //  Since this project could be a rails engine, find a rails app somewhere in or under the cwd.\n    let entries = glob.sync('**/bin/rails', {realpath: true})\n    if (!entries || entries.length <= 0) {\n      throw new Error(`Unable to find Rails application directory based on existence of 'bin/rails'`)\n    }\n\n    if (entries.length > 1) {\n      throw new Error(`railsAppCwd() should only find one rails application but found ${entries}`)\n    }\n    let cwd = path.join(entries[0], '../..')\n\n    super({cwd: cwd}, config)\n  }\n\n  enumerateEngines() {\n    let results = this.exec(`${Ruby.localPath('railsRunner.sh')} ${Ruby.localPath('enumerateEngines.rb')}`)\n\n    // run via spring with zero results:\n    //    status: 0,\n    //    stdout: '{}\\n',\n    //    stderr: 'Running via Spring preloader in process 95498\\n',\n    return JSON.parse(results.stdout)\n  }\n\n  /**\n   * Return the baseDirectories to search for assets such as images.  In rails, this means\n   *  enumerating rails engines and collecting their root paths.  This is a lengthy process\n   *  because you have to startup a rails environment to enumerate the engines, so we cache\n   *  the baseDirectories in a file and compare it to the Gemfile.lock's modified time.  If\n   *  the Gemfile.lock changes, we throw out the cache, enumerate the engines again and write\n   *  a new cache file.\n   *\n   * @returns {{baseDirectories: string[]}}\n   */\n  baseDirectories() {\n    if (!File.modified(Files.GEM_LOCK, Files.CACHE)) {\n      this.log(`Gemfile.lock is unchanged, using baseDirectories cache.`)\n      return jsonfile.readFileSync(Files.CACHE)\n    }\n    else {\n      this.log(`Generating baseDirectories and rails engines cache...`)\n      File.delete(Files.CACHE, true)\n\n      let engines = this.enumerateEngines()\n      console.log(this.dump(engines)) // eslint-disable-line no-console\n\n      let baseDirectories = ['./']\n      for (let key of Object.keys(engines)) {\n        baseDirectories.push(engines[key])\n      }\n\n      this.log(`Writing baseDirectories cache...`)\n      let result = {baseDirectories: baseDirectories}\n      jsonfile.writeFileSync(Files.CACHE, result, {spaces: 2})\n      return result\n    }\n  }\n}\nexport default Rails\n","import extend from 'extend'\nimport Rails from './ruby/rails'\nimport stringify from 'stringify-object'\n\n//import Util from 'gulp-util'\n\n// NOTE: `source` and `watch` are node-glob options hashes. e.g. gulp.src(source.glob, source.options)\n\n// Baseline is the simplest possible.  Take caution in modifying this one or make sure your platform preset overrides everything necessary.\nconst Baseline = {\n  javascripts: {\n    source: {\n      glob: 'index.js',\n      options: {cwd: 'js'},\n      all: '**/*' // include all files, may have yml, sh, json, in addition to js\n    },\n    test: {\n      glob: '**/*.js',\n      options: {cwd: 'test'}\n    },\n    watch: {\n      glob: '**/*.js',\n      options: {cwd: 'js'}\n    },\n    dest: 'dist'\n  },\n  stylesheets: {\n    source: {\n      glob: ['*.scss', '!_*.scss'],  // do not compile all files, only non-underscored files\n      options: {cwd: 'scss'},\n      all: '**/*.scss'\n    },\n    watch: {\n      glob: '**/*.scss',\n      options: {cwd: 'scss'}\n    },\n    dest: 'dist'\n  },\n  images: {\n    source: {options: {cwd: 'images'}},\n    watch: {options: {cwd: 'images'}},\n    dest: 'dist'\n  },\n  postProcessor: {\n    source: {options: {cwd: 'dist'}},\n    watch: {options: {cwd: 'dist'}},\n    dest: 'dist'\n  }\n}\n\nconst PresetNodeSrc = {\n  javascripts: {\n    source: { options: {cwd: 'src'}},\n    watch: {options: {cwd: 'src'}}\n  }\n}\n\nconst PresetNodeLib = {\n  javascripts: {\n    source: { options: {cwd: 'lib'}},\n    watch: {options: {cwd: 'lib'}}\n  }\n}\n\n// Rails, the oddball from a structure consideration\nconst railsJs = 'app/assets/javascripts'\nconst railsSs = 'app/assets/stylesheets'\nconst railsImages = 'app/assets/images'\nconst railsDest = 'public/assets/debug'\nconst PresetRails = {\n  javascripts: {\n    source: {\n      glob: 'application.js',\n      options: {cwd: railsJs}\n    },\n    watch: {options: {cwd: railsJs}},\n    dest: railsDest\n  },\n  stylesheets: {\n    source: {options: {cwd: railsSs}},\n    watch: {options: {cwd: railsSs}},\n    dest: railsDest\n  },\n  images: {\n    source: {options: {cwd: railsImages}},\n    watch: {options: {cwd: railsImages}},\n    dest: railsDest\n  },\n  postProcessor: {\n    source: {options: {cwd: railsDest}},\n    watch: {options: {cwd: railsDest}},\n    dest: 'public/assets/digest'\n  }\n}\n\n\nconst Preset = class {\n  static baseline(overrides = {}) {\n    return extend(true, {}, Baseline, overrides)\n  }\n\n  static nodeLib(overrides = {}) {\n    return extend(true, {}, Baseline, PresetNodeLib, overrides)\n  }\n\n  static nodeSrc(overrides = {}) {\n    return extend(true, {}, Baseline, PresetNodeSrc, overrides)\n  }\n\n  static rails(overrides = {}) {\n    return extend(true, {}, Baseline, PresetRails, new Rails().baseDirectories(), overrides)\n  }\n\n  /**\n   * Helper to quickly resolve the config from preset based on the presetType\n   *\n   * @param preset\n   * @param configs - ordered set of overrides\n   * @returns {source, watch, dest}\n   */\n  static resolveConfig(preset, ...configs) {\n    if (!preset) {\n      throw new Error(`Preset must be specified.  Please use one from the preset.js or specify a custom preset configuration.`)\n    }\n\n    let configOverrides = extend(true, {}, ...configs)\n    //Util.log(`config before typeConfig: \\n${stringify(configOverrides)}`)\n\n    if (!configOverrides || !configOverrides.presetType) {\n      throw new Error(`presetType must be specified in the config (usually the Default config).  See preset.js for a list of types such as javascripts, stylesheets, etc.`)\n    }\n\n    let typeConfig = null\n    if (configOverrides.presetType !== 'macro') {\n      typeConfig = preset[configOverrides.presetType]\n      if (!typeConfig) {\n        throw new Error(`Unable to resolve configuration for presetType: ${configOverrides.presetType} from preset: ${stringify(preset)}`)\n      }\n    }\n    else {\n      typeConfig = {}\n    }\n\n    // now that we've determined the typeConfig, overlay the overrides\n    let resolved = extend(true, {}, typeConfig, configOverrides)\n\n    //Util.log(`resolved config with preset: \\n${stringify(resolved)}`)\n    return resolved\n  }\n}\nexport default Preset\n","import Base from './base'\nimport notify from 'gulp-notify'\nimport Util from 'gulp-util'\n\nexport const Default = {\n  debug: false,\n  watch: true,\n  task: {\n    name: undefined,\n    description: '',\n    prefix: '', // task name prefix\n    suffix: ''  // task name suffix\n  }\n}\n\nconst BaseGulp = class extends Base {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, ...configs) {\n    super(Default, ...configs)\n    this.requireValue(gulp, 'gulp')\n    this.gulp = gulp\n  }\n\n  taskName() {\n    if (!this.config.task || !this.config.task.name) {\n      return ''\n    }\n\n    //if (!this.config.task.name) {\n    //  this.notifyError(`Expected ${this.constructor.name} to have a task name in the configuration.`)\n    //}\n    return `${this.config.task.prefix}${this.config.task.name}${this.config.task.suffix}`\n  }\n\n  watchTaskName() {\n    if (this.config.watch && this.config.watch.name) {\n      return this.config.watch.name\n    }\n    else {\n      return `${this.taskName()}:watch`\n    }\n  }\n\n  notifyError(error, done, watching = false) {\n    let isWatching = (this.gulp ? this.gulp.watching : undefined) || watching\n    this.debug(`isWatching: ${isWatching}`)\n    //this.debugDump('notifyError', error)\n\n    let lineNumber = (error.lineNumber) ? `Line ${error.lineNumber} -- ` : ''\n    let taskName = error.task || ((this.config.task && this.config.task.name) ? this.taskName() : this.constructor.name)\n\n    let title = `Task [${taskName}] failed`\n    if (error.plugin) {\n      title += ` in [${error.plugin}]`\n    }\n\n    notify({\n      title: title,\n      message: `${lineNumber}See console.`,\n      sound: 'Sosumi' // See: https://github.com/mikaelbr/node-notifier#all-notification-options-with-their-defaults\n    }).write(error)\n\n    let tag = Util.colors.black.bgRed\n    let report = `\\n${tag('    Task:')} [${Util.colors.cyan(taskName)}]\\n`\n\n    if (error.plugin) {\n      report += `${tag('  Plugin:')} [${error.plugin}]\\n`\n    }\n\n    report += `${tag('   Error:')} `\n\n    if (error.message) {\n      report += `${error.message}\\n`\n    }\n    else {\n      report += `${error}\\n`\n    }\n\n    if (error.lineNumber) {\n      report += `${tag('    Line:')} ${error.lineNumber}\\n`\n    }\n\n    if (error.fileName) {\n      report += `${tag('    File:')} ${error.fileName}\\n`\n    }\n    this.log(report)\n\n    // Prevent the 'watch' task from stopping\n    if (isWatching) {\n        // do nothing\n      this.debug(`notifyError: watching, so not doing anything`)\n    }\n    else if (this.gulp) {\n      // if this is not used, we see \"Did you forget to signal async completion?\", it also unfortunately logs more distracting information below.  But we need to exec the callback with an error to halt execution.\n      this.donezo(done, error)\n    }\n    else {\n      this.debug(`notifyError: throwing error`)\n      throw error\n    }\n  }\n\n  /**\n   * if done is provided, run it\n   *\n   * @param done\n   */\n  donezo(done, error = null) {\n    if (done) {\n      if (error) {\n        this.debug('executing callback with error')\n        done(error)\n      }\n      else {\n        this.debug('executing callback without error')\n        done()\n      }\n    }\n    else {\n      this.debug(`done callback was not provided`)\n    }\n  }\n}\n\nexport default BaseGulp\n","import BaseGulp from './baseGulp'\nimport Preset from './preset'\nimport extend from 'extend'\nimport Util from 'gulp-util'\nimport stringify from 'stringify-object'\n\nexport const Default = {\n  watch: true,\n  debug: false\n}\n\nconst BaseRecipe = class extends BaseGulp {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n\n    super(gulp,\n      extend(true, {},  // extend presets here since BaseGulp doesn't use preset.\n        Default,\n        {baseDirectories: preset.baseDirectories},\n        Preset.resolveConfig(preset, ...configs)\n      )\n    )\n\n    // in case someone needs to inspect it later i.e. buildControl\n    this.preset = preset\n    this.registerTask()\n    this.registerWatchTask()\n  }\n\n  registerWatchTask() {\n    if (this.config.watch) {\n      // generate watch task e.g. sass:watch\n      let name = this.watchTaskName()\n      this.debug(`Registering task: ${Util.colors.green(name)}`)\n      this.watchFn = (done) => {\n        this.log(`[${Util.colors.green(name)}] watching ${this.config.watch.glob} ${stringify(this.config.watch.options)}...`)\n\n        return this.gulp.watch(this.config.watch.glob, this.config.watch.options, () => {\n          this.log(`Watched file changed, running ${this.taskName()}...`);\n          return Promise\n            .resolve(this.run(done, true))\n            .then(() => this.logFinish())\n        })\n      }\n      this.watchFn.description = this.createWatchDescription()\n      this.gulp.task(name, this.watchFn)\n    }\n  }\n\n  createWatchDescription() {\n    return Util.colors.grey(`|___ watches ${this.config.watch.options.cwd}/${this.config.watch.glob}`)\n  }\n\n  registerTask() {\n    // generate primary task e.g. sass\n\n    // set a fn for use by the task, also used by aggregate/series/parallel\n    let taskFn = (done) => {\n      //this.log(`Running task: ${Util.colors.green(name)}`)\n\n      if (this.config.debug) {\n        this.debugDump(`Executing ${Util.colors.green(this.displayName())} with config`, this.config)\n      }\n      return this.run(done)\n    }\n\n    // metadata for convenience so that gulp tasks show up with this instead of 'anonymous'\n    taskFn.displayName = this.displayName()\n\n    // assign it last so that displayName() can resolve this first as others may set it externally like <clean>\n    this.taskFn = taskFn\n\n    if (this.shouldRegisterTask()) {\n\n      // set the description\n      if (this.createDescription !== undefined) {\n        this.config.task.description = this.createDescription()\n      }\n\n      // set metadata on fn for discovery by gulp\n      this.taskFn.description = this.config.task.description\n\n\n      // register\n      let name = this.taskName()\n      this.debug(`Registering task: ${Util.colors.green(name)}`)\n      this.gulp.task(name, this.taskFn)\n    }\n  }\n\n  shouldRegisterTask() {\n    return (this.config.task && this.config.task.name)\n  }\n\n  displayName() {\n    if (this.taskFn !== undefined && this.taskFn.displayName) {\n      return this.taskFn.displayName\n    }\n    else if (this.shouldRegisterTask()) {\n      return this.taskName()\n    }\n    else {\n      // metadata for convenience so that gulp tasks show up with this instead of 'anonymous'\n      return `<${this.constructor.name}>`\n    }\n  }\n\n  logFinish(message = 'finished.') {\n    this.log(`[${Util.colors.green(this.taskName())}] ${message}`)\n  }\n\n  debugOptions() { // this controls the gulp-debug log statement, created to mirror our #debug's log format\n    return {title: `[${Util.colors.cyan('debug')}][${Util.colors.cyan(this.constructor.name)}]`}\n  }\n}\n\nexport default BaseRecipe\n","import BaseRecipe from './baseRecipe'\nimport eslint from 'gulp-eslint'\nimport debug from 'gulp-debug'\nimport gulpif from 'gulp-if'\nimport {PluginError} from 'gulp-util'\n\n\nexport const Default = {\n  debug: false,\n  presetType: 'javascripts',\n  task: {\n    name: 'eslint'\n  },\n  source: {\n    glob: '**/*.js'\n  },\n  options: {\n    // Files were being ignored\n    // ---------------------------\n    //  With gulp-pipeline setup, we are specific enough with cwd that we don't need to use a blanket\n    //  (default) .eslintignore file.  Turn off this behavior and lint anything we point at.\n    //  @see http://eslint.org/docs/developer-guide/nodejs-api#cliengine\n    warnFileIgnored: true,\n    ignore: false\n  }\n}\n\nconst EsLint = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  createDescription() {\n    return `Lints ${this.config.source.options.cwd}/${this.config.source.glob}`\n  }\n\n  run(done, watching = false) {\n    // eslint() attaches the lint output to the \"eslint\" property of the file object so it can be used by other modules.\n    return this.gulp.src(this.config.source.glob, this.config.source.options)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(eslint(this.config.options))\n      .pipe(eslint.format()) // outputs the lint results to the console. Alternatively use eslint.formatEach() (see Docs).\n      // primarily eslint.failAfterError() but we use notifyError to process the difference between watching and not so we don't end process.\n      .pipe(eslint.results((results) => {\n        let count = results.errorCount;\n        if (count > 0) {\n          let error =  new PluginError(\n            'gulp-eslint',\n            {\n              name: 'ESLintError',\n              message: 'Failed with ' + count + (count === 1 ? ' error' : ' errors')\n            }\n          )\n\n          this.notifyError(error, done, watching)\n        }\n      }))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n\n    // FIXME: even including any remnant of JSCS at this point broke everything through the unfound requirement of babel 5.x through babel-jscs.  I can't tell where this occurred, but omitting gulp-jscs for now gets me past this issue.  Revisit this when there are clear updates to use babel 6\n    //.pipe(jscs())      // enforce style guide\n    //.pipe(stylish())  // log style errors\n    //.pipe(jscs.reporter('fail')) // fail on error\n  }\n}\n\nexport default EsLint\n","import BaseRecipe from './baseRecipe'\nimport uglify from 'gulp-uglify'\nimport debug from 'gulp-debug'\nimport gulpif from 'gulp-if'\nimport sourcemaps from 'gulp-sourcemaps'\nimport concat from 'gulp-concat'\nimport extReplace from 'gulp-ext-replace'\nimport glob from 'glob'\n\nexport const Default = {\n  debug: false,\n  presetType: 'postProcessor',\n  task: {\n    name: 'uglify'\n  },\n  source: {\n    glob: '**/*.js'\n  },\n  options: {\n    compress: {\n      warnings: true\n    },\n    mangle: false,\n    preserveComments: /^!|@preserve|@license|@cc_on/i\n  },\n\n  concat: {\n    dest: undefined // if specified, will use concat to this dest filename, OTHERWISE, it will just assume one file and rename to .min.js\n  }\n}\n\n/**\n * By default, assumes ONE source glob file match, OTHERWISE specify {concat: { dest: 'out.min.js' } }\n *\n */\nconst Uglify = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  createDescription() {\n    let msg = `Uglifies ${this.config.source.options.cwd}/${this.config.source.glob} to ${this.config.dest}`\n    if (this.config.concat.dest) {\n      msg += `/${this.config.concat.dest}`\n    }\n    return msg\n  }\n\n  run(done, watching = false) {\n\n    // helpful log message if files not found\n    let files = glob.sync(this.config.source.glob, this.config.source.options)\n    if (!files || files.length <= 0) {\n      this.log(`No sources found to uglify in: ${this.dump(this.config.source)}`)\n    }\n\n    if (this.config.concat.dest) {\n\n      // run the concat scenario\n      this.debug(`concat dest: ${this.config.dest}/${this.config.concat.dest}`)\n      return this.gulp.src(this.config.source.glob, this.config.source.options)\n        .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n        .pipe(concat(this.config.concat.dest))\n\n        // identical to below\n        .pipe(sourcemaps.init())\n        .pipe(uglify(this.config.options))\n        .on('error', (error) => {\n          this.notifyError(error, done, watching)\n        })\n        .pipe(this.gulp.dest(this.config.dest))\n    }\n    else {\n\n      // run the single file scenario\n      this.debug('single file with no dest')\n\n      if (files.length > 1) {\n        throw new Error(`Should only find one file but found ${files.length} for source: ${this.dump(this.config.source)}.  Use the concat: {dest: 'output.min.js' } configuration for multiple files concatenated with uglify.  Files found: ${this.dump(files)}`)\n      }\n\n      return this.gulp.src(this.config.source.glob, this.config.source.options)\n        .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n        .pipe(extReplace('.min.js', /.js$/))  // needs to be end-of-line regex so we don't messup paths with '.js' in the names.\n\n        // identical to above\n        .pipe(sourcemaps.init())\n        .pipe(uglify(this.config.options))\n        .on('error', (error) => {\n          this.notifyError(error, done, watching)\n        })\n        .pipe(this.gulp.dest(this.config.dest))\n    }\n  }\n}\n\nexport default Uglify\n","import BaseRecipe from './baseRecipe'\nimport autoprefixer from 'gulp-autoprefixer'\nimport gulpif from 'gulp-if'\nimport debug from 'gulp-debug'\n\nexport const Default = {\n  options: {  // from bootstrap\n    browsers: [\n      //\n      // Official browser support policy:\n      // http://v4-alpha.getbootstrap.com/getting-started/browsers-devices/#supported-browsers\n      //\n      'Chrome >= 35', // Exact version number here is kinda arbitrary\n      // Rather than using Autoprefixer's native \"Firefox ESR\" version specifier string,\n      // we deliberately hardcode the number. This is to avoid unwittingly severely breaking the previous ESR in the event that:\n      // (a) we happen to ship a new Bootstrap release soon after the release of a new ESR,\n      //     such that folks haven't yet had a reasonable amount of time to upgrade; and\n      // (b) the new ESR has unprefixed CSS properties/values whose absence would severely break webpages\n      //     (e.g. `box-sizing`, as opposed to `background: linear-gradient(...)`).\n      //     Since they've been unprefixed, Autoprefixer will stop prefixing them,\n      //     thus causing them to not work in the previous ESR (where the prefixes were required).\n      'Firefox >= 31', // Current Firefox Extended Support Release (ESR)\n      // Note: Edge versions in Autoprefixer & Can I Use refer to the EdgeHTML rendering engine version,\n      // NOT the Edge app version shown in Edge's \"About\" screen.\n      // For example, at the time of writing, Edge 20 on an up-to-date system uses EdgeHTML 12.\n      // See also https://github.com/Fyrd/caniuse/issues/1928\n      'Edge >= 12',\n      'Explorer >= 9',\n      // Out of leniency, we prefix these 1 version further back than the official policy.\n      'iOS >= 8',\n      'Safari >= 8',\n      // The following remain NOT officially supported, but we're lenient and include their prefixes to avoid severely breaking in them.\n      'Android 2.3',\n      'Android >= 4',\n      'Opera >= 12'\n    ]\n  }\n}\n\nconst Autoprefixer = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  run(done, watching = false) {\n    // FIXME: is this right or wrong?  this class initially was extracted for reuse of Default options\n    return this.gulp.src(this.config.source)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(autoprefixer(this.config.options))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n      .pipe(this.gulp.dest(this.config.dest))\n  }\n}\n\nexport default Autoprefixer\n","import BaseRecipe from './baseRecipe'\nimport BrowserSync from 'browser-sync'\nimport debug from 'gulp-debug'\nimport extend from 'extend'\nimport gulpif from 'gulp-if'\nimport changed    from 'gulp-changed'\nimport imagemin   from 'gulp-imagemin'\nimport merge from 'merge-stream'\nimport path from 'path'\n\nexport const Default = {\n  debug: false,\n  presetType: 'images',\n  task: {\n    name: 'images'\n  },\n  watch: {\n    glob: '**',\n    options: {\n      //cwd: ** resolved from preset **\n    }\n  },\n  source: {\n    // baseDirectories: [] ** resolved from preset **\n    glob: '**',\n    options: {\n      //cwd: ** resolved from preset **\n    }\n  },\n  options: {}\n}\n\nconst Images = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n    this.browserSync = BrowserSync.create()\n  }\n\n  createDescription() {\n    return `Minifies change images from ${this.config.source.options.cwd}/${this.config.source.glob}`\n  }\n\n  run(done, watching = false) {\n\n    var tasks = this.config.baseDirectories.map((baseDirectory) => {\n      // join the base dir with the relative cwd\n      return this.runOne(done, path.join(baseDirectory, this.config.source.options.cwd), watching)\n    })\n    return merge(tasks);\n  }\n\n  runOne(done, cwd, watching) {\n\n    // setup a run with a single cwd a.k.a base directory FIXME: perhaps this could be in the base recipe? or not?\n    let options = extend(true, {}, this.config.source.options)\n    options.cwd = cwd\n    this.debug(`src: ${cwd}/${this.config.source.glob}`)\n\n    return this.gulp.src(this.config.source.glob, options)\n      .pipe(changed(this.config.dest)) // ignore unchanged files\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(imagemin(this.config.options))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n      .pipe(this.gulp.dest(this.config.dest))\n      .pipe(this.browserSync.stream())\n  }\n}\n\nexport default Images\n","import BaseRecipe from './baseRecipe'\nimport {Default as AutoprefixerDefault} from './autoprefixer'\nimport autoprefixer from 'gulp-autoprefixer'\nimport BrowserSync from 'browser-sync'\nimport debug from 'gulp-debug'\nimport sass from 'gulp-sass'\nimport sourcemaps from 'gulp-sourcemaps'\nimport gulpif from 'gulp-if'\nimport glob from 'glob'\nimport path from 'path'\n\nimport File from './util/file'\nconst node_modules = File.findup('node_modules')\n\nexport const Default = {\n  debug: false,\n  presetType: 'stylesheets',\n  task: {\n    name: 'sass'\n  },\n  options: {\n    // NOTE: these are added in the constructor\n    // WARNING: `includePaths` this should be a fully qualified path if overriding\n    //  @see https://github.com/sass/node-sass/issues/1377\n    //includePaths: [node_modules] // this will find any node_modules above the current working directory\n  },\n  // capture defaults from autoprefixer class\n  autoprefixer: {\n    options: AutoprefixerDefault.options\n  }\n}\n\nconst Sass = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    let includePaths = [node_modules]\n    // add sub-node_module paths to the includePaths\n    for (let subNodeModules of glob.sync('*/node_modules', {cwd: node_modules})) {\n      let fullpath = path.join(node_modules, subNodeModules)\n      includePaths.push(fullpath)\n    }\n\n    super(gulp, preset, Default, {options: {includePaths: includePaths}}, ...configs)\n    this.browserSync = BrowserSync.create()\n  }\n\n  createDescription() {\n    return `Compiles ${this.config.source.options.cwd}/${this.config.source.glob}`\n  }\n\n  run(done, watching = false) {\n    // add debug for importing problems (can be very helpful)\n    if (this.config.debug && this.config.options.importer === undefined) {\n      this.config.options.importer = (url, prev, done) => {\n        this.debug(`importing ${url} from ${prev}`)\n        done({file: url})\n      }\n    }\n\n    return this.gulp.src(this.config.source.glob, this.config.source.options)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(sourcemaps.init())\n      .pipe(sass(this.config.options))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n      .pipe(autoprefixer(this.config.autoprefixer.options))\n      .pipe(sourcemaps.write())\n      .pipe(this.gulp.dest(this.config.dest))\n      .pipe(this.browserSync.stream())\n  }\n}\n\nexport default Sass\n","import BaseRecipe from './baseRecipe'\nimport scssLint from 'gulp-scss-lint'\nimport scssLintStylish from 'gulp-scss-lint-stylish'\nimport debug from 'gulp-debug'\nimport gulpif from 'gulp-if'\nimport File from './util/file'\n\nexport const Default = {\n  debug: false,\n  presetType: 'stylesheets',\n  task: {\n    name: 'scss:lint'\n  },\n  source: {\n    glob: '**/*.scss'\n  },\n  options: {\n    customReport: scssLintStylish\n  }\n}\n\nconst ScssLint = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n\n    if (!this.config.source.options.cwd) {\n      this.notifyError(`Expected to find source.options.cwd in \\n${this.dump(this.config)}`)\n    }\n\n    // If a config is not specified, emulate the eslint config behavior by looking up.\n    //  If there is a config at or above the source cwd, use it, otherwise leave null.\n    if (!this.config.options.config) {\n      let configFile = File.findup('.scss-lint.yml', {cwd: this.config.source.options.cwd})\n      if (configFile) {\n        this.config.options.config = configFile\n      }\n    }\n  }\n\n  createDescription() {\n    return `Lints ${this.config.source.options.cwd}/${this.config.source.glob}`\n  }\n\n  run(done, watching = false) {\n    if (this.config.options.config) {\n      this.log(`Using config: ${this.config.options.config}`)\n    }\n\n    return this.gulp.src(this.config.source.glob, this.config.source.options)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(scssLint(this.config.options))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n  }\n}\n\nexport default ScssLint\n","import BaseGulp from './baseGulp'\nimport Util from 'gulp-util'\nimport unique from 'array-unique'\n\nconst Default = {\n  debug: false,\n  watch: true  // register a watch task that aggregates all watches and runs the full sequence\n}\n\nconst Aggregate = class extends BaseGulp {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param configs - customized overrides\n   */\n  constructor(gulp, taskName, recipes, ...configs) {\n    super(gulp, Default, {task: {name: taskName}}, ...configs)\n\n    if (Array.isArray(recipes)) {\n      this.notifyError(`recipes must not be an array, but a function, series, or parallel, found: ${recipes}`)\n    }\n\n    if (Aggregate.isAggregate(recipes)) {\n      // it's another aggregate, so just use it's taskFn, but with a wrapper so we don't rename it.\n      this.taskFn = (done) => recipes.taskFn(done)\n    }\n    else {\n      // track recipes as taskFn so that aggregates can be included and resolved as part of other aggregates just like recipes\n      this.taskFn = recipes\n    }\n\n    this.registerTask(this.taskName())\n\n    if (this.config.watch) {\n      this.registerWatchTask(this.watchTaskName())\n    }\n  }\n\n  createHelpText() {\n    //let taskNames = new Recipes().toTasks(this.taskFn)\n    //\n    //// use the config to generate the dynamic help\n    //return `Runs [${taskNames.join(', ')}]`\n    return ''\n  }\n\n  createWatchHelpText() {\n    let taskNames = this.watchableRecipes().reduce((a, b) => {\n      return a.concat(b.taskName())\n    }, [])\n\n    return Util.colors.grey(`|___ aggregates watches from [${taskNames.join(', ')}] and runs all tasks on any change`)\n  }\n\n  registerTask(taskName) {\n    //let tasks = this.toTasks(this.taskFn)\n    //this.debug(`Registering task: ${Util.colors.green(taskName)} for ${stringify(tasks)}`)\n    this.gulp.task(taskName, this.taskFn)\n    this.taskFn.displayName = taskName\n    this.taskFn.description = this.createHelpText()\n  }\n\n  watchToGlobs(recipe) {\n    // glob could be array\n    let fullGlobs = []\n    if (recipe.config.watch.glob === undefined) {\n      return fullGlobs\n    }\n    let globs = recipe.config.watch.glob\n    if (!Array.isArray(recipe.config.watch.glob)) {\n      globs = [recipe.config.watch.glob]\n    }\n\n    for (let glob of globs) {\n      fullGlobs.push(`${recipe.config.watch.options.cwd}/${glob}`)\n    }\n    return fullGlobs\n  }\n\n  registerWatchTask(watchTaskName) {\n    let coloredTask = `${Util.colors.green(watchTaskName)}`\n    // generate watch task\n    if (this.watchableRecipes().length < 1) {\n      this.debug(`No watchable recipes for task: ${coloredTask}`)\n      return\n    }\n\n    this.debug(`Registering task: ${coloredTask}`)\n\n    // https://github.com/alienfast/gulp-pipeline/issues/29\n    // aggregate all globs into an array for a single watch fn call\n    let globs = []\n    for (let recipe of this.watchableRecipes()) {\n      globs = globs.concat(this.watchToGlobs(recipe))\n    }\n\n    globs = unique(globs)\n    this.debugDump('globs', globs)\n\n    let watchFn = () => {\n      this.log(`${coloredTask} watching ${globs.join(', ')}`)\n      let watcher = this.gulp.watch(globs, {}, (done) => {\n\n        // set this global so that BasGulp#notifyError can make sure not to exit if we are watching\n        this.gulp.watching = true\n        this.debug(`setting gulp.watching: ${this.gulp.watching}`)\n        let result = this.taskFn(done)\n        return result\n      })\n\n      // watcher.on('error', (error) => {\n      //   this.notifyError(`${coloredTask} ${error}`)\n      // })\n\n      watcher.on('add', (path) => {\n        this.log(`${coloredTask} ${path} was added, running...`)\n      })\n\n      watcher.on('change', (path) => {\n        this.log(`${coloredTask} ${path} was changed, running...`)\n      })\n      watcher.on('unlink', (path) => {\n        this.log(`${coloredTask} ${path} was deleted, running...`)\n      })\n\n      return watcher\n    }\n\n    watchFn.displayName = `<${watchTaskName}>`\n    watchFn.description = this.createWatchHelpText()\n    return this.gulp.task(watchTaskName, watchFn)\n  }\n\n  static isAggregate(current) {\n    if (current.taskFn && current.taskFn.recipes) {\n      return true\n    }\n\n    return false\n  }\n\n  flatten(list) {\n    // parallel and series set `.recipes` on the function as metadata\n    let callback = (prev, current) => {\n      let item = current\n\n      // Flatten any series/parallel\n      if (typeof current === \"function\" && current.recipes) {\n        this.debugDump(`flatten function recipes`, current.recipes)\n        item = this.flatten(current.recipes)\n      }\n      // Flatten any Aggregate object - exposes a taskFn (which should be a series/parallel)\n      else if (Aggregate.isAggregate(current)) {\n        this.debugDump(`flatten ${current.constructor.name} with taskFn.recipes`, current.taskFn.recipes)\n        item = this.flatten(current.taskFn.recipes)\n      }\n      //else {\n      //  if (current.taskFn) {\n      //    this.debugDump(`flatten something WITH taskFn`, current)\n      //\n      //    if(current.taskFn.recipes){\n      //      this.debugDump(`flatten something WITH taskFn.recipes`, current.taskFn.recipes)\n      //    }\n      //  }\n      //  else if (current.recipes) {\n      //    this.debugDump(`flatten something WITH recipes but not a fn`, current)\n      //  }\n      //  else if (current && current.constructor) {\n      //    this.debugDump(`flatten ${current.constructor.name} with no recipes`, current)\n      //  }\n      //  else if (Array.isArray(current)) {\n      //    this.debugDump(`flatten array with no recipes`, current)\n      //  }\n      //  else {\n      //    this.debugDump(`flatten ???`, current)\n      //  }\n      //}\n      return prev.concat(item)\n    }\n\n    return list.reduce(callback, [])\n  }\n\n  flattenedRecipes() {\n    let recipes = this.flatten([this.taskFn])\n    this.debugDump(`flattenedRecipes`, recipes)\n    return recipes\n  }\n\n  watchableRecipes() {\n    // create an array of watchable recipes\n    let watchableRecipes = []\n    for (let recipe of this.flattenedRecipes()) {\n      if ((typeof recipe !== \"string\") && (typeof recipe !== \"function\") && recipe.config.watch) {\n        watchableRecipes.push(recipe)\n      }\n    }\n    return watchableRecipes\n  }\n}\n\nexport default Aggregate\n","import BaseRecipe from './baseRecipe'\nimport {rollup} from 'rollup'\nimport extend from 'extend'\nimport glob from 'glob'\nimport replace from 'rollup-plugin-replace'\nimport nodeResolve from 'rollup-plugin-node-resolve'\nimport commonjs from 'rollup-plugin-commonjs'\nimport process from 'process'\nimport File from './util/file'\n//import BrowserSync from 'browser-sync'\nconst node_modules = File.findup('node_modules')\n\n\nexport const Default = {\n  debug: false,\n  presetType: 'javascripts',\n  task: {\n    name: 'rollup:es'\n  },\n  options: {\n    //entry: 'src/index.js', // ** resolved from the source glob/cwd **\n    //dest: '', // ** resolved from preset **\n    sourceMap: true,\n    format: 'es6',\n    plugins: []\n  }\n}\n\nexport const NodeEnvReplace = {\n  nodeEnvReplace: {\n    enabled: false,\n    options: {\n      'process.env.NODE_ENV': JSON.stringify('production')\n    }\n  }\n}\n\n// This nodeResolve configuration is not used unless it is within the plugins: [nodeResolve(this.config.nodeResolve.options)] - pass this.config.nodeResolve.enabled == true in config to enable default options\nexport const NodeResolve = {\n  nodeResolve: {\n    enabled: false,\n\n    // - see https://github.com/rollup/rollup-plugin-node-resolve\n    options: {\n      // use \"jsnext:main\" if possible\n      // – see https://github.com/rollup/rollup/wiki/jsnext:main\n      jsnext: true,\n\n      // use \"main\" field or index.js, even if it's not an ES6 module (needs to be converted from CommonJS to ES6\n      // – see https://github.com/rollup/rollup-plugin-commonjs\n      main: true,\n\n      //skip: [ 'some-big-dependency' ], // if there's something your bundle requires that you DON'T want to include, add it to 'skip'\n\n      // By default, built-in modules such as `fs` and `path` are treated as external if a local module with the same name\n      // can't be found. If you really want to turn off this behaviour for some reason, use `builtins: false`\n      builtins: false,\n\n      // Some package.json files have a `browser` field which specifies alternative files to load for people bundling\n      // for the browser. If that's you, use this option, otherwise pkg.browser will be ignored.\n      browser: true,\n\n      // not all files you want to resolve are .js files\n      extensions: ['.js', '.json']\n    }\n  }\n}\n\nexport const CommonJs = {\n  commonjs: {\n    enabled: false,\n    options: {\n      include: `${node_modules}/**`,\n      //exclude: [ `${node_modules}/foo/**', `${node_modules}/bar/**` ],\n\n      // search for files other than .js files (must already be transpiled by a previous plugin!)\n      extensions: ['.js'] // defaults to [ '.js' ]\n    }\n  }\n}\n\nconst RollupEs = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    let config = extend(true, {}, ...configs)\n\n    if (!config.options.dest) {\n      throw new Error(`options.dest filename must be specified.`)\n    }\n\n    super(gulp, preset, Default, NodeEnvReplace, NodeResolve, CommonJs, config)\n\n    // Utilize the presets to get the dest cwd/base directory, then add the remaining passed-in file path/name\n    this.config.options.dest = `${this.config.dest}/${this.config.options.dest}`\n\n    //----------------------------------------------\n    // plugins order: nodeResolve, commonjs, babel\n\n    // Add commonjs before babel\n    if (this.config.commonjs.enabled) {\n      this.debug('Adding commonjs plugin')\n      // add at the beginning\n      this.config.options.plugins.unshift(commonjs(this.config.commonjs.options))\n    }\n\n    // Add nodeResolve before (commonjs &&|| babel)\n    if (this.config.nodeResolve.enabled) {\n      this.debug('Adding nodeResolve plugin')\n      // add at the beginning\n      this.config.options.plugins.unshift(nodeResolve(this.config.nodeResolve.options))\n    }\n\n    // Add nodeEnvReplace before (nodeResolve &&|| commonjs &&|| babel)\n    if (this.config.nodeEnvReplace.enabled) {\n      this.debug('Adding nodeEnvReplace plugin')\n      // add at the beginning\n      this.config.options.plugins.unshift(replace(this.config.nodeEnvReplace.options))\n    }\n\n    //this.browserSync = BrowserSync.create()\n  }\n\n  resolveEntry() {\n    // Resolve the source and make sure there is one entry point\n    if (Array.isArray(this.config.source.glob)) {\n      throw new Error(`Rollup only accepts one entry point.  Found array for source.glob: ${this.config.source.glob}`)\n    }\n    // get full path results\n    this.config.source.options['realpath'] = true\n\n    let entry = glob.sync(this.config.source.glob, this.config.source.options)\n\n    if (!entry || entry.length <= 0) {\n      throw new Error(`Unable to resolveEntry() for source: ${this.dump(this.config.source)} from ${process.cwd()}`)\n    }\n\n    if (entry.length > 1) {\n      throw new Error(`resolveEntry() should only find one entry point but found ${entry} for source: ${this.dump(this.config.source)}`)\n    }\n    return entry[0]\n  }\n\n  createDescription() {\n    return `Rollup ${this.config.source.options.cwd}/${this.config.source.glob} in the ${this.config.options.format} format to ${this.config.options.dest}`\n  }\n\n  run(done, watching = false) {\n    this.debug(`watching? ${watching}`)\n    let options = extend(true, {\n        entry: this.resolveEntry(),\n        onwarn: (message) => {\n          //this.notifyError(message, watching)\n          this.log(message)\n        }\n      },\n      this.config.options)\n\n    this.logDebugOptions(options)\n\n    return rollup(options)\n      .then((bundle) => {\n        return bundle.write(options)\n      })\n      .catch((error) => {\n        error.plugin = 'rollup'\n        this.notifyError(error, done, watching)\n      })\n  }\n\n  /**\n   * This is rather elaborate, but useful.  It strings together the options used to run rollup for debugging purposes.\n   *\n   * @param options\n   */\n  logDebugOptions(options) {\n    if (!this.config.debug) {\n      return\n    }\n\n    let prunedOptions = extend(true, {}, options)\n    prunedOptions.plugins = 'x' // placeholder to replace\n\n    let plugins = `plugins: [ // (count: ${this.config.options.plugins.length})\\n`\n    if (this.config.commonjs.enabled) {\n      plugins += `\\t\\tcommonjs(${this.dump(this.config.commonjs.options)}),\\n`\n    }\n    if (this.config.nodeResolve.enabled) {\n      plugins += `\\t\\tnodeResolve(${this.dump(this.config.nodeResolve.options)}),\\n`\n    }\n    if (this.config.babel) {\n      plugins += `\\t\\tbabel(${this.dump(this.config.babel)}),\\n`\n    }\n    plugins += `],\\n`\n\n\n    let display = this.dump(prunedOptions)\n    display = display.replace(\"plugins: 'x',\", plugins)\n    this.debug(`Executing rollup with options: ${display}`)\n  }\n}\n\nexport default RollupEs\n","import RollupEs from './rollupEs'\nimport Preset from './preset'\nimport babel from 'rollup-plugin-babel';\n\nexport const Default = {\n  task: {\n    name: 'rollup:cjs'\n  },\n  presetType: 'javascripts',\n  babel: {\n    babelrc: false,\n    presets: ['es2015-rollup']\n  },\n  options: {\n    //dest: '', // required\n    format: 'cjs'\n    //plugins: [babel({\n    //  babelrc: false,\n    //  presets: ['es2015-rollup']\n    //})]\n  },\n  nodeEnvReplace: {\n    enabled: false // building for react in the browser?\n  },\n  nodeResolve: {\n    enabled: false // bundle a full package with dependencies?\n  },\n  commonjs: {\n    enabled: false // convert dependencies to commonjs modules for rollup\n  }\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst RollupCjs = class extends RollupEs {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    let config = Preset.resolveConfig(preset, Default, ...configs)\n    super(gulp, preset, Default, {\n        options: {\n          plugins: [babel(config.babel)]\n        }\n      },\n      ...configs)\n  }\n}\n\nexport default RollupCjs\n","import RollupCjs from './rollupCjs'\n\nexport const Default = {\n  task: {\n    name: 'rollup:cjs-bundled'\n  },\n  nodeResolve: {\n    enabled: true // bundle a full package with dependencies? (if not use RollupCjs itself)\n  },\n  commonjs: {\n    enabled: true // convert dependencies to commonjs modules for rollup\n  }\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst RollupCjsBundled = class extends RollupCjs {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n}\n\nexport default RollupCjsBundled\n","import RollupCjsBundled from './rollupCjsBundled'\n\nexport const Default = {\n  task: {\n    name: 'rollup:iife'\n  },\n  options: {\n    //dest: '', // required\n    format: 'iife'\n  }\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst RollupIife = class extends RollupCjsBundled {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n}\n\nexport default RollupIife\n","import RollupCjs from './rollupCjs'\n\nexport const Default = {\n  task: {\n    name: 'rollup:amd'\n  },\n  options: {\n    //dest: '', // required\n    format: 'amd'\n  }\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst RollupAmd = class extends RollupCjs {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n}\n\nexport default RollupAmd\n","import RollupCjs from './rollupCjs'\n\nexport const Default = {\n  task: {\n    name: 'rollup:umd'\n  },\n  options: {\n    //dest: '', // required\n    format: 'umd'\n  }\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst RollupUmd = class extends RollupCjs {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n}\n\nexport default RollupUmd\n","import BaseRecipe from './baseRecipe'\nimport File from './util/file'\nimport extend from 'extend'\nimport path from 'path'\nimport chalk from 'chalk'\nimport process from 'process'\nimport globAll from 'glob-all'\nimport fs from 'fs-extra'\n\nconst Default = {\n  debug: false,\n  watch: false,\n  presetType: 'macro',\n  task: {\n    name: 'copy'\n  },\n  process: (content, srcpath) => {  // eslint-disable-line no-unused-vars\n    return content\n  }, // allows modification of the file content before writing to destination\n  encoding: 'utf8',\n  mode: false,            // True will copy the existing file/directory permissions, otherwise set the mode e.g. 0644\n  timestamp: false,       // Preserve the timestamp attributes(atime and mtime) when copying files. Timestamp will not be preserved\n  //                        //    when the file contents or name are changed during copying.\n  //preserveBOM: false,     // Whether to preserve the BOM on this.read rather than strip it.\n\n  source: {\n    glob: undefined,      // [] or string glob pattern, uses node-glob-all https://github.com/jpillora/node-glob-all#usage\n    options: {            // https://github.com/isaacs/node-glob#options\n      cwd: process.cwd()  // base path\n    }\n  },\n  dest: undefined,         // base path\n  options: {}\n}\n\n/**\n *  Copy files to a destination with permissions and processing options.\n *\n *  TODO: reducing the amount of code by using other maintained libraries would be fantastic.  Worst case, break most of this into it's own library?\n *\n *  @credit to grunt and grunt-contrib-copy for the implementation. See license for attribution.\n */\nconst Copy = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n\n    this.requireValue(this.config.source.glob, `source.glob`)\n    this.requireValue(this.config.source.options.cwd, `source.options.cwd`)\n    this.requireValue(this.config.dest, `dest`)\n\n    // ensure array\n    if (!Array.isArray(this.config.source.glob)) {\n      this.config.source.glob = [this.config.source.glob]\n    }\n  }\n\n  createDescription() {\n    return `Copies ${this.config.source.options.cwd}/${this.config.source.glob} to ${this.config.dest}`\n  }\n\n  chmod(from, to) {\n    if (this.config.mode !== false) {\n      fs.chmodSync(to, (this.config.mode === true) ? fs.lstatSync(from).mode : this.config.mode)\n    }\n  }\n\n  run(done) {\n    try {\n      let dirs = {}\n      let tally = {\n        dirs: 0,\n        files: 0\n      }\n      let copyOptions = {\n        encoding: this.config.encoding,\n        process: this.config.process\n      }\n\n      let options = extend(true, {}, this.config.source.options, {realpath: true})\n      let pattern = this.config.source.glob\n\n      // ensure pattern is an array\n      if (!Array.isArray(pattern)) {\n        pattern = [pattern]\n      }\n\n      // make a copy so that nothing processing will alter the config values\n      pattern = pattern.slice()\n\n      this.log(`Copying ${options.cwd}/${pattern}...`)\n      //this.debugDump(`this config: `, this.config)\n\n      for (let fromFullPath of globAll.sync(pattern, options)) {\n        let from = path.relative(process.cwd(), fromFullPath)\n        let toRelative = path.relative(options.cwd, from) // grab the path of the file relative to the cwd of the source cwd - allows nesting\n        let to = path.join(this.config.dest, toRelative)\n\n        if (File.isDir(from)) {\n          this.log(`\\t${chalk.cyan(to)}`)\n          File.mkdir(to)\n          this.chmod(from, to)\n          dirs[from] = to\n          tally.dirs++\n        }\n        else {\n          this.log(`\\t-> ${chalk.cyan(to)}`)\n          File.copy(from, to, copyOptions)\n          if (this.config.timestamp) {\n            File.syncTimestamp(from, to)\n          }\n          this.chmod(from, to)\n          tally.files++\n        }\n      }\n\n      if (this.config.timestamp) {\n        for (let from of Object.keys(dirs)) {\n          File.syncTimestamp(from, dirs[from])\n        }\n      }\n\n      let msg = ''\n      if (tally.dirs) {\n        msg += `Created ${chalk.cyan(tally.dirs.toString()) + (tally.dirs === 1 ? ' directory' : ' directories')}`\n      }\n\n      if (tally.files) {\n        msg += (tally.dirs ? ', copied ' : 'Copied ') + chalk.cyan(tally.files.toString()) + (tally.files === 1 ? ' file' : ' files')\n      }\n\n      this.log(msg)\n      this.donezo(done)\n    }\n    catch (error) {\n      this.notifyError(error, done)\n    }\n  }\n}\n\nexport default Copy\n","import BaseRecipe from './baseRecipe'\nimport Preset from './preset'\nimport del from 'del'\n\nexport const Default = {\n  presetType: `macro`, // allows direct instantiation\n  debug: false,\n  task: false,\n  watch: false,\n  sync: true,  // necessary so that tasks can be run in a series, can be overriden for other purposes\n  options: {}\n}\n\nconst BaseClean = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    let config = Preset.resolveConfig(preset, Default, ...configs)\n    let destGlob = {} // assume no glob - directory and contents will be deleted\n    if(config.glob){\n      destGlob = {dest: `${config.dest}/${config.glob}`}\n    }\n    super(gulp, preset, config, destGlob)\n  }\n\n  createDescription(){\n    // use the config to generate the dynamic help\n    return `Cleans ${this.config.dest}`\n  }\n\n  run(done, watching = false) {\n    if (this.config.sync) {\n      this.debug(`deleting ${this.config.dest}`)\n      let paths = del.sync(this.config.dest, this.config.options)\n      this.logDeleted(paths)\n    }\n    else {\n      this.debug(`deleting ${this.config.dest}`)\n      return del(this.config.dest, this.config.options)\n        .then((paths) => {\n          this.logDeleted(paths)\n        })\n        .catch((error) => {\n          error.plugin = 'del'\n          this.notifyError(error, watching)\n        })\n    }\n\n    this.donezo(done)\n  }\n\n  logDeleted(paths) {\n    if (paths.length > 0) {\n      this.log(`Deleted files and folders:`)\n      for(let path of paths){\n        this.log(`    ${path}`)\n      }\n    }\n  }\n}\n\nexport default BaseClean\n","import BaseClean from './baseClean'\n\nexport const Default = {\n  presetType: 'images',\n  task: {\n    name: 'clean:images'\n  }\n}\n\nconst CleanImages = class extends BaseClean {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n}\n\nexport default CleanImages\n","import BaseClean from './baseClean'\n\nexport const Default = {\n  presetType: 'stylesheets',\n  task: {\n    name: 'clean:stylesheets'\n  },\n  glob: '**/*.css'\n}\n\nconst CleanStylesheets = class extends BaseClean {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n}\n\nexport default CleanStylesheets\n","import BaseClean from './baseClean'\n\nexport const Default = {\n  presetType: 'javascripts',\n  task: {\n    name: 'clean:javascripts'\n  },\n  glob: '**/*.js'\n}\n\nconst CleanJavascripts = class extends BaseClean {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n}\n\nexport default CleanJavascripts\n","import BaseClean from './baseClean'\n\nexport const Default = {\n  presetType: 'postProcessor',\n  task: {\n    name: 'clean:digest'\n  }\n}\n\nconst CleanDigest = class extends BaseClean {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n}\n\nexport default CleanDigest\n","import Base from '../base'\n\nconst Recipes = class extends Base {\n\n  constructor(config = {debug: false}) {\n    super(config)\n  }\n\n  /**\n   * Prefer to return the taskFn instead of a string, but return the string if that's all that is given to us.\n   *\n   * @param recipeOrAggregateOrString\n   * @returns {*}\n   */\n  toTask(recipeOrAggregateOrString) {\n    let task = null\n    if (typeof recipeOrAggregateOrString === \"string\") {\n      // any given task name should be returned as-is\n      task = recipeOrAggregateOrString\n      this.debug(`toTask(): ${task}`)\n    }\n    else {\n      if (recipeOrAggregateOrString.taskFn) {\n        // recipes and aggregates expose a taskFn\n        task = recipeOrAggregateOrString.taskFn\n      }\n      else if (typeof recipeOrAggregateOrString === \"function\") {\n        // any given fn should be return as-is i.e. series/parallel\n        task = recipeOrAggregateOrString\n      }\n\n      this.debug(`toTask(): ${task.name || task.displayName}`)\n    }\n    return task\n  }\n\n  /**\n   * Yield the nearest set of task names - return nested series/parallel fn - do not follow them and flatten them (they will do that themselves if using the helper methods)\n   *\n   * @param recipes\n   * @returns {Array}\n   */\n  toTasks(recipes, tasks = []) {\n    this.debugDump('toTasks: recipes', recipes)\n\n    for (let recipe of recipes) {\n      //this.debugDump(`recipe taskName[${recipe.taskName? recipe.taskName() : ''}] isArray[${Array.isArray(recipe)}]`, recipe)\n      if (Array.isArray(recipe)) {\n        tasks.push(this.toTasks(recipe, []))\n      }\n      else {\n        let taskName = this.toTask(recipe)\n        tasks.push(taskName)\n      }\n    }\n\n    return tasks\n  }\n}\n\nexport default Recipes\n","import Recipes from './recipes'\n\n/**\n *\n * @param recipes - (recipes or task fns, or task names)\n */\nconst parallel = (gulp, ...recipes) => {\n   let parallel = gulp.parallel(new Recipes().toTasks(recipes))\n\n  // hack to attach the recipes for inspection by aggregate\n  parallel.recipes = recipes\n  return parallel\n}\nparallel.displayName = `<parallel>`\n\nexport default parallel\n","import Aggregate from './aggregate'\nimport Preset from './preset'\nimport CleanImages from './cleanImages'\nimport CleanStylesheets from './cleanStylesheets'\nimport CleanJavascripts from './cleanJavascripts'\nimport CleanDigest from './cleanDigest'\nimport parallel from './util/parallel'\n\nconst Default = {\n  debug: false,\n  watch: false,\n  presetType: 'macro',\n  task: {\n    name: 'clean',\n    description: 'Cleans images, stylesheets, and javascripts.'\n  }\n}\n\nconst Clean = class extends Aggregate {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    let config = Preset.resolveConfig(preset, Default, ...configs)\n    let recipes = parallel(gulp,\n      new CleanImages(gulp, preset, ...configs),\n      new CleanStylesheets(gulp, preset, ...configs),\n      new CleanJavascripts(gulp, preset, ...configs),\n      new CleanDigest(gulp, preset, ...configs)\n    )\n\n    super(gulp, config.task.name, recipes, config)\n  }\n}\n\nexport default Clean\n","import BaseClean from '../baseClean'\n\n/**\n * Simplified clean() that uses the BaseClean recipe\n */\nconst clean = (gulp, name, options = {}) => {\n  let c = new BaseClean(gulp, {}, {dest: name, options: {force: true}}, options)\n  // set the display name so it shows up in the task list\n  c.taskFn.displayName = `<clean>`\n  return c\n}\n\nexport default clean\n","import BaseRecipe from './baseRecipe'\nimport BrowserSync from 'browser-sync'\nimport debug from 'gulp-debug'\nimport extend from 'extend'\nimport gulpif from 'gulp-if'\nimport rev   from 'gulp-rev'\n\nexport const Default = {\n  debug: false,\n  presetType: 'postProcessor',\n  task: {\n    name: 'rev'\n  },\n  watch: {\n    glob: '**',\n    options: {\n      //cwd: ** resolved from preset **\n      ignore: ['**/digest', '**/digest/**', '**/*.map']\n    }\n  },\n  source: {\n    glob: '**',\n    options: {\n      //cwd: ** resolved from preset **\n      ignore: ['**/digest', '**/digest/**', '**/*.map']\n    }\n  },\n  options: {\n    merge: true,\n    path: 'rev-manifest.json'\n  }\n}\n\nconst Rev = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n    this.browserSync = BrowserSync.create()\n  }\n\n  createDescription() {\n    return `Adds revision digest to assets from ${this.config.source.options.cwd}/${this.config.source.glob}`\n  }\n\n  run(done, watching = false) {\n    this.debugDump(`gulp.src ${this.config.source.glob}`, this.config.source.options)\n\n\n    // base is not working    https://github.com/sindresorhus/gulp-rev/issues/150\n    //let manifestOptions = extend(true, {}, {base: this.config.dest}, this.config.options)\n\n    // workaround\n    let manifestOptions = extend(true, {},\n      this.config.options,\n      {\n        base: this.config.dest,\n        path: `${this.config.dest}/${this.config.options.path}`\n      }\n    )\n\n    this.debugDump(`manifestOptions`, manifestOptions)\n\n    return this.gulp.src(this.config.source.glob, this.config.source.options)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(rev(this.config.options))\n      .pipe(this.gulp.dest(this.config.dest))\n\n      // Merge with an existing unless merge == false\n      .pipe(rev.manifest(manifestOptions))\n      .pipe(this.gulp.dest(this.config.dest))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n      .pipe(this.browserSync.stream())\n  }\n}\n\nexport default Rev\n","import BaseRecipe from './baseRecipe'\nimport Preset from './preset'\nimport extend from 'extend'\nimport debug from 'gulp-debug'\nimport gulpif from 'gulp-if'\nimport revReplace   from 'gulp-rev-replace'\n\nexport const Default = {\n  debug: false,\n  presetType: 'postProcessor',\n  task: {\n    name: 'rev:replace'\n  },\n  watch: false,\n  source: { // cwd/ignore defaulted from preset set in constructor\n    glob: '**'\n  },\n  manifest: 'rev-manifest.json', // file name only\n  options: {}\n}\n\nconst RevReplace = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    let resolvedPreset = Preset.resolveConfig(preset, Default, ...configs)\n    super(gulp, preset,\n      Default,\n      {\n        source: {\n          options: { // replace everything in the postProcessor dest folder (except manifest)\n            cwd: resolvedPreset.dest,\n            ignore: [`**/${resolvedPreset.manifest}`]\n          }\n        }\n      },\n      ...configs)\n  }\n\n  createDescription() {\n    return `Adds revision digest to assets from ${this.config.source.options.cwd}/${this.config.source.glob}`\n  }\n\n  run(done, watching = false) {\n\n    this.debugDump(`gulp.src ${this.config.source.glob}`, this.config.source.options)\n\n    // options.manifest has to originate from gulp.src\n    let options = extend(true, {},\n      {\n        // full path to the manifest file\n        manifest: this.gulp.src(`${this.config.dest}/${this.config.manifest}`)\n      },\n      this.config.options\n    )\n\n    this.debugDump(`revReplace options`, options)\n\n    return this.gulp.src(this.config.source.glob, this.config.source.options)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(revReplace(options))\n      .pipe(this.gulp.dest(this.config.dest))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n  }\n}\n\nexport default RevReplace\n","import BaseRecipe from './baseRecipe'\nimport BrowserSync from 'browser-sync'\nimport debug from 'gulp-debug'\nimport gulpif from 'gulp-if'\nimport replace from 'gulp-replace'\nimport cssnano from 'gulp-cssnano'\nimport extReplace from 'gulp-ext-replace'\n\nexport const Default = {\n  debug: false,\n  minExtension: true, // replace extension .css with .min.css\n  presetType: 'postProcessor',\n  task: {\n    name: 'css:nano'\n  },\n  watch: false, // typical use has this at the end of a pipeline, allowing watch here can cause infinite loops on aggregates\n  //watch: {\n  //  glob: ['**/*.css'],\n  //  options: {\n  //    //cwd: ** resolved from preset **\n  //  }\n  //},\n  source: {\n    glob: ['**/*.css', '!**/*.min.css'],\n    options: {\n      //cwd: ** resolved from preset **\n    }\n  },\n  options: {\n    //autoprefixer: false // assume this is done with Sass recipe\n    // sourcemap: false\n  }\n}\n\n/**\n * Recipe to be run after Rev or any other that places final assets in the digest destination directory\n */\nconst CssNano = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n    this.browserSync = BrowserSync.create()\n  }\n\n  createDescription() {\n    return `Minifies digest css from ${this.config.source.options.cwd}/${this.config.source.glob}`\n  }\n\n  run(done, watching = false) {\n\n    return this.gulp.src(this.config.source.glob, this.config.source.options)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(gulpif(this.config.minExtension, extReplace('.min.css')))\n      // whack the sourcemap otherwise it gives us \"Unsupported source map encoding charset=utf8;base64\"\n      // ...we don't want it in the min file anyway\n      .pipe(replace(/\\/\\*# sourceMappingURL=.*\\*\\//g, ''))\n      .pipe(cssnano(this.config.options))\n      .pipe(this.gulp.dest(this.config.dest))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n      .pipe(this.browserSync.stream())\n  }\n}\n\nexport default CssNano\n","import BaseRecipe from './baseRecipe'\nimport Preset from './preset'\n\nexport const Default = {\n  debug: false,\n  presetType: 'javascripts'\n}\n\nconst BaseMocha = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    // resolve watch cwd based on test cwd\n    super(gulp, preset,\n      Default,\n      {watch: {options: {cwd: Preset.resolveConfig(preset, Default, ...configs).test.options.cwd}}},\n      ...configs)\n  }\n\n  createDescription() {\n    return `Tests ${this.config.test.options.cwd}/${this.config.test.glob}`\n  }\n}\n\nexport default BaseMocha\n","import BaseMocha from './baseMocha'\nimport mocha from 'gulp-mocha'\nimport debug from 'gulp-debug'\nimport gulpif from 'gulp-if'\n\nexport const Default = {\n  task: {\n    name: 'mocha'\n  },\n  options: {\n    reporter: 'nyan'\n  }\n}\n\nconst Mocha = class extends BaseMocha {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  run(done, watching = false) {\n    let bundle = this.gulp.src(this.config.test.glob, this.config.test.options)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(mocha(this.config.options)) // gulp-mocha needs filepaths so you can't have any plugins before it\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n\n    return bundle\n  }\n}\n\nexport default Mocha\n","import BaseMocha from './baseMocha'\nimport mochaPhantomJS from 'gulp-mocha-phantomjs'\nimport debug from 'gulp-debug'\nimport gulpif from 'gulp-if'\n\nexport const Default = {\n  test: {\n    glob: 'testrunner.html'\n  },\n  task: {\n    name: 'mocha:phantomjs'\n  },\n  options: {\n    reporter: 'nyan'\n  }\n}\n\n/*\nWARNING: Using this means using a browser, and if your tests are written in ES2015 you need to use rollup first!\n*/\nconst MochaPhantomJs = class extends BaseMocha {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  run(done, watching = false) {\n    let bundle = this.gulp.src(this.config.test.glob, this.config.test.options)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(mochaPhantomJS(this.config.options))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n\n    return bundle\n  }\n}\n\nexport default MochaPhantomJs\n","import BaseRecipe from './baseRecipe'\nimport extend from 'extend'\n\n/**\n *  This is the base for publish recipes using BuildControl\n */\nexport const Default = {\n\n  dir: 'build', // directory to assemble the files - make sure to add this to your .gitignore so you don't publish this to your source branch\n  source: {\n    types: ['javascripts', 'stylesheets'], // source types to resolve from preset and copy into the build directory pushing to the dist branch\n    files: ['.travis.yml', 'package.json', 'bower.json', 'LICENSE*', 'dist'] // any additional file patterns to copy to `dir`\n    /*\n     # NOTE: we need .travis.yml so that travis-ci will process the ignore branches\n     *  add the following:\n     *\n     *   # remove the dist branch and dist tags from travis builds\n     *   branches:\n     *    except:\n     *       - dist\n     *       - /^v(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)$/\n     */\n  },\n  watch: false,\n  presetType: 'macro',\n  options: { // see https://github.com/alienfast/build-control/blob/master/src/buildControl.js#L11\n    //cwd: 'build', // Uses recipe's dir\n    branch: 'dist',\n    tag: {\n      existsFailure: false\n    },\n    clean: {\n      before: true,\n      after: false\n    }\n  }\n}\n\nconst BasePublish = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n\n    // use the dir as the cwd to the BuildControl class\n    this.config.options = extend(true, {debug: this.config.debug, cwd: this.config.dir}, this.config.options)\n  }\n}\n\nexport default BasePublish\n","import BasePublish from './basePublish'\nimport {BuildControl} from 'build-control'\n\nconst Default = {\n  task: {\n    name: 'prepublish',\n    description: 'Checks tag name and ensures directory has all files committed.'\n  },\n  options: {\n    tag: {\n      existsFailure: true\n    }\n  }\n}\n\n/**\n *  This recipe will run a preflight check on publishing to ensure tag name and commits are ready to go.\n *\n *  Run this before long running tests to error your build quickly.\n */\nconst Prepublish = class extends BasePublish {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  run(done) {\n    let buildControl = new BuildControl(this.config.options)\n    buildControl.prepublishCheck()\n\n    this.donezo(done)\n  }\n}\n\nexport default Prepublish\n","import BasePublish from './basePublish'\nimport {BuildControl} from 'build-control'\nimport fs from 'fs-extra'\nimport path from 'path'\nimport process from 'process'\nimport pathIsAbsolute from 'path-is-absolute'\nimport glob from 'glob'\n\n\n/**\n *  This recipe will keep your source branch clean but allow you to easily push your\n *  dist files to a separate branch, all while keeping track of the origin commits.\n *\n *  Did I mention it will autotag based on your package.json?\n *\n *  Typically, your build tools put compiled files in dist.  A clean build packages typically needs to consist of\n *  1. package metadata - package.json or bower.json\n *  2. license\n *  3. compiled dist files\n *  4. source files - Javascript ES projects, as well as SCSS libraries for example need to publish source\n *\n *  To keep your source branch clean with this recipe's default configuration, add the following to .gitignore:\n *  - build\n *  - dist\n *\n *  Run this recipe, it will delete/create the `build` dir, copy the files above, and commit/push (changes from remote)\n *  to the `dist` branch.  Now you have clean separation of source and dist.\n *\n *  Have long running maintenance on an old version?  Publish to a different dist branch like { options: {branch: 'dist-v3'} }\n *\n *  Travis-CI note: add the following:\n *\n *   # remove the dist branch and dist tags from travis builds\n *   branches:\n *    except:\n *       - dist\n *       - /^v(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)$/\n *\n */\nconst Default = {\n  //debug: true,\n  npm: {\n    bump: true,\n    publish: true\n  },\n  readme: {\n    enabled: true,\n    name: 'README.md',\n    template: `# %sourceName%\n\n%sourceTagLink% built from commit %sourceCommitLink% on branch \\`%sourceBranch%\\`. See the [README](../..) for more details\n\n---\n<sup>Built and published by [gulp-pipeline](https://github.com/alienfast/gulp-pipeline) using [build-control](https://github.com/alienfast/build-control)</sup>\n`\n  },\n  task: {\n    name: 'publish:build',\n    description: 'Assembles and pushes the build to a branch'\n  }\n}\n\nconst PublishBuild = class extends BasePublish {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  run(done) {\n    let buildControl = new BuildControl(this.config.options)\n\n    // bump the version and commit to git\n    if(this.config.npm.bump) {\n      buildControl.npm.bump()\n    }\n\n    this.prepareBuildFiles()\n\n    this.generateReadme(buildControl)\n\n    // run the commit/tagging/pushing\n    buildControl.run()\n\n    // publish to npm\n    if(this.config.npm.publish) {\n      buildControl.npm.publish()\n    }\n\n    done()\n  }\n\n  generateReadme(buildControl) {\n    // generate a readme on the branch if one is not copied in.\n    if (this.config.readme.enabled) {\n      let readme = path.join(this.config.dir, this.config.readme.name)\n      if (fs.existsSync(readme)) {\n        this.log(`Found readme at ${readme}.  Will not generate a new one from the template.  Turn this message off with { readme: {enabled: false} }`)\n      }\n      else {\n        fs.writeFileSync(readme, buildControl.interpolate(this.config.readme.template))\n      }\n    }\n  }\n\n  /**\n   * Copy all the configured sources to the config.dir directory\n   */\n  prepareBuildFiles() {\n    let buildDir = this.config.dir\n    this.debug(`Using build directory: ${buildDir}`)\n\n    // copy preset type files\n    for (let type of this.config.source.types) {  // defaulted in BasePublish\n      let typePreset = this.preset[type]\n\n      this.log(`Copying ${typePreset.source.options.cwd}/${typePreset.source.all}...`)\n      for (let name of glob.sync(typePreset.source.all, typePreset.source.options)) {\n        let from = path.join(typePreset.source.options.cwd, name)\n        let to = path.join(buildDir, from)\n        this.log(`\\t...to ${to}`)\n        fs.copySync(from, to)\n      }\n    }\n\n    // copy any additional configured files\n    for (let fileGlob of this.config.source.files) { // defaulted in BasePublish\n\n      this.log(`Copying ${fileGlob}...`)\n      for (let fromFullPath of glob.sync(fileGlob, {realpath: true})) {\n        let from = path.relative(process.cwd(), fromFullPath)\n        let to = path.join(buildDir, from)\n        this.log(`\\t...to ${to}`)\n        fs.copySync(from, to)\n      }\n    }\n  }\n\n  resolvePath(cwd, base = process.cwd()) {\n    if (!pathIsAbsolute(cwd)) {\n      return path.join(base, cwd)\n    }\n    else {\n      return cwd\n    }\n  }\n}\n\nexport default PublishBuild\n","import BasePublish from './basePublish'\nimport {Npm} from 'build-control'\n\nconst Default = {\n  task: {\n    name: 'publish:npm',\n    description: 'Publishes package on npm'\n  },\n  options: {}\n}\n\n/**\n *  This recipe will run execute `npm publish` with no other checks.\n *\n *  @see also PublishBuild - it will bump, publish build, and publish npm (all in one)\n */\nconst PublishNpm = class extends BasePublish {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  run(done) {\n    let npm = new Npm(this.config.options)\n    npm.publish()\n    this.donezo(done)\n  }\n}\n\nexport default PublishNpm\n","import BasePublish from './basePublish'\nimport {BuildControl} from 'build-control'\n\n\n/**\n *  This recipe will keep your source branch clean but allow you to easily push your\n *  _gh_pages files to the gh-pages branch.\n */\nconst Default = {\n  //debug: true,\n  task: {\n    name: 'publish:gh-pages',\n    description: 'Publishes a _gh_pages directory to gh-pages branch'\n  },\n  options: {\n    cwd: '_gh_pages',\n    branch: 'gh-pages',\n    tag: false, // no tagging on gh-pages push\n    clean: { // no cleaning of cwd, it is built externally\n      before: false,\n      after: true  // we create a git repo, and without cleaning, subsequent runs will fail with \"uncommitted changes\"\n    }\n  }\n}\n\nconst PublishGhPages = class extends BasePublish {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  run(done) {\n    let buildControl = new BuildControl(this.config.options)\n\n    // run the commit/tagging/pushing\n    buildControl.run()\n\n    done()\n  }\n}\n\nexport default PublishGhPages\n","import BaseRecipe from './baseRecipe'\nimport tmp from 'tmp'\nimport fs from 'fs-extra'\nimport Ruby from './ruby/ruby'\n\nconst Default = {\n  watch: false,\n  presetType: 'macro',\n  task: {\n    name: 'jekyll',\n    description: 'Builds a jekyll site'\n  },\n  options: {\n    baseCommand: 'bundle exec',\n    config: '_config.yml',\n    incremental: false,\n    raw: undefined // 'baseurl: \"/bootstrap-material-design\"'\n  }\n}\n\nconst Jekyll = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  run(done) {\n    let config = `--config ${this.config.options.config}`\n\n    let rawConfigFile = this.rawConfig()\n\n    // If raw is specified, add the temporary config file to the list of configs passed into the jekyll command\n    if (rawConfigFile) {\n      config += `,${rawConfigFile}`\n    }\n\n    this.exec(`${Ruby.localPath(('rubyRunner.sh'))} ${this.config.options.baseCommand} jekyll build ${config}`)\n\n    this.donezo(done)\n  }\n\n  // Create temporary config file if needed\n  rawConfig() {\n    if (this.config.options.raw) {\n      // Tmp file is only available within the context of this function\n      let tmpFile = tmp.fileSync({prefix: '_config.', postfix: '.yml'})\n\n      // Write raw to file\n      fs.writeFileSync(tmpFile.name, this.config.options.raw)\n\n      // return the file path\n      return tmpFile.name\n    }\n    else {\n      return null\n    }\n  }\n}\n\nexport default Jekyll\n","import Recipes from './recipes'\n\n/**\n *\n * @param recipes - (recipes or task fns, or task names)\n */\nconst series = (gulp, ...recipes) => {\n  let series = gulp.series(new Recipes().toTasks(recipes))\n\n  // hack to attach the recipes for inspection by aggregate\n  series.recipes = recipes\n  return series\n}\nseries.displayName = `<series>`\n\nexport default series\n","import tmp from 'tmp'\n\n/**\n *\n */\nconst tmpDir = (options = {prefix: 'gulp-pipeline_'}) => {\n  let tmpDirObj = tmp.dirSync(options)\n\n  tmpDirObj.removeCallback.displayName = '<tmpDir cleanup>'\n\n  return tmpDirObj\n}\n\nexport default tmpDir\n","import tmpDirObj from './tmpDir'\n\n/**\n *\n */\nconst tmpDirName = (options = {prefix: 'gulp-pipeline_'}) => {\n  return tmpDirObj(options).name\n}\n\nexport default tmpDirName\n","import BaseRecipe from './baseRecipe'\n\nconst Default = {\n  debug: false,\n  watch: false,\n  presetType: 'macro',\n  task: false\n}\n\n/**\n * Sleep the given ms value, for those quirky cases like when you need the filesystem to catch up.\n */\nconst Sleep = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, sleep, ...configs) {\n    super(gulp, preset, Default, {sleep: sleep}, ...configs)\n  }\n\n  createDescription(){\n    return `Sleeps for ${this.config.sleep} milliseconds.`\n  }\n\n  run(done) {\n    setTimeout(() => { // eslint-disable-line no-undef\n      this.donezo(done)\n    }, this.config.sleep)\n  }\n}\n\nexport default Sleep\n","import Sleep from '../sleep'\n\n/**\n * Simplified sleep() that uses the Sleep recipe\n */\nconst sleep = (gulp, ms) => {\n  let c = new Sleep(gulp, {}, ms)\n  // set the display name so it shows up in the task list\n  c.taskFn.displayName = `<sleep>`\n  return c\n}\n\nexport default sleep\n","import extend from 'extend'\nimport Util from 'gulp-util'\nimport stringify from 'stringify-object'\nimport DefaultRegistry from 'undertaker-registry'\n\nexport const Default = {\n  debug: false,\n  // preset: -- mixed in at runtime in the constructor to avoid issues in non-rails projects\n  global: {debug: false} // mixed into every config i.e debug: true\n}\n\nconst BaseRegistry = class extends DefaultRegistry {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(...configs) {\n    super()\n    this.config = extend(true, {}, Default, ...configs)\n    this.debugDump(`[${this.constructor.name}] using resolved config:`, this.config)\n  }\n\n  // ----------------------------------------------\n  // protected\n\n  /**\n   * Class-based configuration overrides.  Shortcut to #keyConfig with class name lookup.\n   */\n  classConfig(clazz) {\n    const className = clazz.prototype.constructor.name\n    return this.keyConfig(className)\n  }\n\n  /**\n   * config key-based configuration overrides:\n   *  - these may be a single config hash or array of config hashes (last hash overrides earlier hashes)\n   *  - in some cases, passing false for the class name may be implemented as omitting the registration of the recipe (see implementation of #init for details)\n   *\n   *  @return -  array - one or more configs as an array, so usage below in init is a universal spread/splat\n   */\n  keyConfig(key) {\n    this.debug(`Resolving config for: ${key}...`)\n    let config = this.config[key]\n\n    this.debugDump(`config`, config)\n    if (config === undefined) {\n      config = [{}]\n    }\n\n    if (!Array.isArray(config)) {\n      config = [config]\n    }\n\n    // add global at the begining of the array\n    config.unshift(this.config.global)\n\n    return config\n  }\n\n  requireValue(value, name) {\n    if (value === undefined || value == null) {\n      this.notifyError(`${name} must be defined, found: ${value}`)\n    }\n  }\n\n  log(msg) {\n    Util.log(msg)\n  }\n\n  debug(msg) {\n    if (this.config.debug) {\n      this.log(`[${Util.colors.cyan('debug')}][${Util.colors.cyan(this.constructor.name)}] ${msg}`)\n    }\n  }\n\n  debugDump(msg, obj) {\n    this.debug(`${msg}:\\n${this.dump(obj)}`)\n  }\n\n  dump(obj) {\n    return stringify(obj)\n  }\n\n  notifyError(error, e) {\n    this.log(error)\n    throw e\n  }\n}\n\nexport default BaseRegistry\n","import BaseRegistry from './baseRegistry'\n\nimport Preset from '../preset'\nimport Clean from '../clean'\nimport CleanDigest from '../cleanDigest'\nimport CssNano from '../cssNano'\nimport Images from '../images'\nimport Sass from '../sass'\nimport RollupAmd from '../rollupAmd'\nimport RollupIife from '../rollupIife'\nimport RollupCjs from '../rollupCjs'\nimport RollupCjsBundled from '../rollupCjsBundled'\nimport RollupUmd from '../rollupUmd'\nimport ScssLint from '../scssLint'\nimport EsLint from '../eslint'\nimport Rev from '../rev'\nimport RevReplace from '../revReplace'\nimport Uglify from '../uglify'\nimport Aggregate from '../aggregate'\nimport parallel from '../util/parallel'\nimport series from '../util/series'\nimport tmpDir from '../util/tmpDir'\nimport clean from '../util/clean'\n\n// per class name defaults that can be overridden\nexport const Default = {\n  // Class-based configuration overrides:\n  //  - these may be a single config hash or array of config hashes (last hash overrides earlier hashes)\n  //  - in some cases, passing false for the class name may be implemented as omitting the registration of the recipe (see implementation of #init for details)\n  RollupIife: true, // absent any overrides, build iife\n  RollupCjs: false,\n  RollupCjsBundled: false,\n  RollupAmd: false,\n  RollupUmd: false\n}\n\n/**\n * gulp.registry(new RailsRegistry(...configs))\n */\nconst RailsRegistry = class extends BaseRegistry {\n\n  /**\n   * @param config - customized overrides of the Default, last one wins\n   */\n  constructor(...configs) {\n    super(Default, {preset: Preset.rails()}, ...configs)\n  }\n\n  init(gulp) {\n    let preset = this.config.preset\n\n    const js = new Aggregate(gulp, 'js',\n      series(gulp,\n        this.esLinters(gulp),\n        this.rollups(gulp)\n      ),\n      ...this.keyConfig('js')\n    )\n\n    const css = new Aggregate(gulp, 'css',\n      series(gulp,\n        this.scssLinters(gulp),\n        new Sass(gulp, preset, ...this.classConfig(Sass))\n      ),\n      ...this.keyConfig('css')\n    )\n\n    const defaultRecipes = new Aggregate(gulp, 'default',\n      series(gulp,\n        new Clean(gulp, preset),\n        parallel(gulp,\n          new Images(gulp, preset, ...this.classConfig(Images)),\n          js,\n          css\n        )\n      ),\n      ...this.keyConfig('default')\n    )\n\n    // Create the production assets\n    const tmpDirObj = tmpDir()\n    const minifiedAssetsDir = tmpDirObj.name\n    this.debug(`tmpDir for minified assets: ${minifiedAssetsDir}`)\n\n\n    // digests need to be one task, tmpDir makes things interdependent\n    const digests = {task: false, watch: false}\n\n    const digest = new Aggregate(gulp, 'digest',\n      series(gulp,\n        new CleanDigest(gulp, preset, digests),\n\n        // minify application.(css|js) to a tmp directory\n        parallel(gulp,\n          new Uglify(gulp, preset, digests, {dest: minifiedAssetsDir, concat: {dest: 'application.js'}}, ...this.classConfig(Uglify)),\n          new CssNano(gulp, preset, digests, {dest: minifiedAssetsDir, minExtension: false}, ...this.classConfig(CssNano))\n        ),\n\n        // rev minified css|js from tmp\n        new Rev(gulp, preset, digests, {\n          source: {\n            options: {\n              cwd: minifiedAssetsDir\n            }\n          }\n        }),\n        // rev all the rest from the debug dir (except the minified application(css|js)) and merge with the previous rev\n        new Rev(gulp, preset, digests, {\n          source: {\n            options: {\n              ignore: ['**/application.js', '**/*.js.map', '**/application.css']\n            }\n          }\n        }),\n\n        // rewrite all revised urls in the assets i.e. css, js\n        new RevReplace(gulp, preset, digests),\n\n        // cleanup the temp files and folders\n        clean(gulp, `${minifiedAssetsDir}/**`)\n      ),\n      ...this.keyConfig('digest')\n    )\n\n    // default then digest\n    new Aggregate(gulp, 'all',\n      series(gulp,\n        defaultRecipes,\n        digest\n      ),\n      ...this.keyConfig('all')\n    )\n  }\n\n  esLinters(gulp) {\n    return new EsLint(gulp, this.config.preset, ...this.classConfig(EsLint))\n  }\n\n  scssLinters(gulp){\n    return new ScssLint(gulp, this.config.preset, ...this.classConfig(ScssLint))\n  }\n\n  rollups(gulp) {\n    let preset = this.config.preset\n    // javascripts may have two different needs, one standard iife, and one cjs for rails engines\n    let rollups = []\n\n    // All rails apps need the iife which is ultimately the application.js.\n    //  Some rails engines may want it only for the purpose of ensuring that libraries can be included properly otherwise the build breaks (a good thing)\n    if (this.config.RollupIife) {\n      rollups.push(\n        new RollupIife(gulp, preset, {\n          options: {\n            dest: 'application.js',\n            moduleName: 'App'\n          }\n        }, ...this.classConfig(RollupIife))\n      )\n    }\n\n    // Rails apps probably don't need commonjs, so by default it is off.\n    //  Rails engines DO need commonjs, it is consumed by the rails app like any other node library.\n    if (this.config.RollupCjs) {\n      rollups.push(\n        new RollupCjs(gulp, preset, {\n          options: {\n            dest: 'application.cjs.js',\n            moduleName: 'App'\n          }\n        }, ...this.classConfig(RollupCjs))\n      )\n    }\n\n    if (this.config.RollupCjsBundled) {\n      rollups.push(\n        new RollupCjsBundled(gulp, preset, {\n          options: {\n            dest: 'application.cjs-bundled.js',\n            moduleName: 'App'\n          }\n        }, ...this.classConfig(RollupCjsBundled))\n      )\n    }\n\n    if (this.config.RollupUmd) {\n      rollups.push(\n        new RollupUmd(gulp, preset, {\n          options: {\n            dest: 'application.umd.js',\n            moduleName: 'App'\n          }\n        }, ...this.classConfig(RollupUmd))\n      )\n    }\n\n    if (this.config.RollupAmd) {\n      rollups.push(\n        new RollupAmd(gulp, preset, {\n          options: {\n            dest: 'application.amd.js',\n            moduleName: 'App'\n          }\n        }, ...this.classConfig(RollupAmd))\n      )\n    }\n\n    return parallel(gulp,\n      ...rollups\n    )\n  }\n}\n\nexport default RailsRegistry\n","import RailsRegistry from './railsRegistry'\nimport EsLint from '../eslint'\nimport ScssLint from '../scssLint'\nimport parallel from '../util/parallel'\nimport File from '../util/file'\n\nexport const Default = {}\n\n/**\n * Simplified registry for RailsEngineDummy applications\n *  - adds extra watches on engine js/css sources\n *\n * gulp.registry(new RailsEngineDummyRegistry(...configs))\n */\nconst RailsEngineDummyRegistry = class extends RailsRegistry {\n\n  /**\n   * @param config - customized overrides of the Default, last one wins\n   */\n  constructor(...configs) {\n    super(Default, ...configs)\n  }\n\n  /**\n   * Add linter for engine source\n   * @param gulp\n   */\n  esLinters(gulp) {\n    const engineCwd = {\n      options: {\n        cwd: File.findup(this.config.preset.javascripts.source.options.cwd, {cwd: '..'})\n      }\n    }\n\n    return parallel(gulp,\n      super.esLinters(gulp),\n      new EsLint(gulp, this.config.preset, {\n        task: {name: 'eslint:engine'},\n        source: engineCwd,\n        watch: engineCwd\n      }) // lint the engine source\n    )\n  }\n\n  /**\n   * Add linter for engine source\n   * @param gulp\n   */\n  scssLinters(gulp) {\n    const engineCwd = {\n      options: {\n        cwd: File.findup(this.config.preset.stylesheets.source.options.cwd, {cwd: '..'})\n      }\n    }\n\n    return parallel(gulp,\n      super.scssLinters(gulp),\n      new ScssLint(gulp, this.config.preset, {\n        //debug: true,\n        task: {name: 'scss:lint:engine'},\n        source: engineCwd,\n        watch: engineCwd\n      }) // lint the engine source\n    )\n  }\n}\n\nexport default RailsEngineDummyRegistry\n"],"names":["Util","Buffer","Default","PluginError","node_modules","rollup","replace","buildControl","BuildControl","Npm","tmpDirObj"],"mappings":"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"}