{"version":3,"file":"gulp-pipeline.cjs.js","sources":["../src/ruby/ruby.js","../src/rails.js","../src/preset.js","../src/base.js","../src/baseGulp.js","../src/baseRecipe.js","../src/eslint.js","../src/uglify.js","../src/autoprefixer.js","../src/images.js","../src/sass.js","../src/scssLint.js","../src/aggregate.js","../src/rollupEs.js","../src/rollupCjs.js","../src/rollupCjsBundled.js","../src/rollupIife.js","../src/rollupAmd.js","../src/rollupUmd.js","../src/util/file.js","../src/copy.js","../src/baseClean.js","../src/cleanImages.js","../src/cleanStylesheets.js","../src/cleanJavascripts.js","../src/cleanDigest.js","../src/util/recipes.js","../src/util/parallel.js","../src/clean.js","../src/rev.js","../src/cssNano.js","../src/mocha.js","../src/basePublish.js","../src/prepublish.js","../src/publishBuild.js","../src/publishNpm.js","../src/publishGhPages.js","../src/jekyll.js","../src/util/series.js","../src/sleep.js"],"sourcesContent":["import path from 'path'\nimport fs from 'fs'\n\nconst Ruby = class {\n  static localPath(name) {\n    let filename = `${name}`\n\n    // if using source dir\n    let filepath = path.join(__dirname, filename) // eslint-disable-line no-undef\n    try {\n      fs.statSync(filepath)\n    }\n    catch (error) {\n      // if using dist dir, use the relative src/ruby path\n      filepath = path.join(__dirname, '../src/ruby', filename) // eslint-disable-line no-undef\n      fs.statSync(filepath)\n    }\n\n    return filepath\n  }\n}\n\nexport default Ruby\n","import Ruby from './ruby/ruby'\nimport path from 'path'\nimport glob from 'glob'\nimport spawn from 'cross-spawn'\nimport fs from 'fs'\nimport jsonfile from 'jsonfile'\nimport Util from 'gulp-util'\nimport stringify from 'stringify-object'\n\nconst BaseDirectoriesCache = `.gulp-pipeline-rails.json`\nconst GemfileLock = `Gemfile.lock`\n\nconst Rails = class {\n  static enumerateEngines() {\n\n    let results = spawn.sync(Ruby.localPath('railsRunner.sh'), [Ruby.localPath('enumerateEngines.rb')], {\n      sdtio: 'inherit',\n      cwd: this.railsAppCwd()\n    })\n\n    //Util.log(stringify(results))\n    if (results.stderr != '' || results.error != null) {\n      Util.log(stringify(results))\n\n      let msg = ''\n      if (results.stderr) {\n        msg += results.stderr\n      }\n      if (results.error) {\n        msg += results.error\n      }\n      // message will be either error or stderr, so just grap both of them\n      throw new Error(`Ruby script error: \\n${results.stderr}${results.error}`)\n    }\n    return JSON.parse(results.stdout)\n  }\n\n  /**\n   * We need a rails app to run our rails script runner.  Since this project could be a rails engine, find a rails app somewhere in or under the cwd.\n   */\n  static railsAppCwd() {\n    let entries = glob.sync('**/bin/rails', {realpath: true})\n    if (!entries || entries.length <= 0) {\n      throw new Error(`Unable to find Rails application directory based on existence of 'bin/rails'`)\n    }\n\n    if (entries.length > 1) {\n      throw new Error(`railsAppCwd() should only find one rails application but found ${entries}`)\n    }\n    return path.join(entries[0], '../..')\n  }\n\n  /**\n   * Return the baseDirectories to search for assets such as images.  In rails, this means\n   *  enumerating rails engines and collecting their root paths.  This is a lengthy process\n   *  because you have to startup a rails environment to enumerate the engines, so we cache\n   *  the baseDirectories in a file and compare it to the Gemfile.lock's modified time.  If\n   *  the Gemfile.lock changes, we throw out the cache, enumerate the engines again and write\n   *  a new cache file.\n   *\n   * @returns {{baseDirectories: string[]}}\n   */\n  static baseDirectories() {\n    if (!this.changed(GemfileLock, BaseDirectoriesCache)) {\n      return jsonfile.readFileSync(BaseDirectoriesCache)\n    }\n    else {\n      Util.log(`Generating baseDirectories cache...`)\n      try {\n        fs.unlinkSync(BaseDirectoriesCache)\n      } catch (error) {\n        //ignore\n      }\n\n      Util.log(`Enumerating rails engines...`)\n      let engines = Rails.enumerateEngines()\n      //console.log(stringify(engines))\n\n      let baseDirectories = ['./']\n      for (let key of Object.keys(engines)) {\n        baseDirectories.push(engines[key])\n      }\n\n      Util.log(`Writing baseDirectories cache...`)\n      let result = {baseDirectories: baseDirectories}\n      jsonfile.writeFileSync(BaseDirectoriesCache, result, {spaces: 2})\n      return result\n    }\n  }\n\n  static changed(sourceFileName, targetFileName) {\n    let sourceStat = null\n    let targetStat = null\n    try {\n      sourceStat = fs.statSync(sourceFileName)\n      targetStat = fs.statSync(targetFileName)\n    }\n    catch (error) {\n      return true\n    }\n\n    if (sourceStat.mtime > targetStat.mtime) {\n      return true\n    }\n    else {\n      return false\n    }\n  }\n}\n\nexport default Rails\n","import extend from 'extend'\nimport Rails from './rails'\nimport stringify from 'stringify-object'\n\n//import Util from 'gulp-util'\n\n// NOTE: `source` and `watch` are node-glob options hashes. e.g. gulp.src(source.glob, source.options)\n\n// Baseline is the simplest possible.  Take caution in modifying this one or make sure your platform preset overrides everything necessary.\nconst Baseline = {\n  javascripts: {\n    source: {\n      glob: 'index.js',\n      options: {cwd: 'src'},\n      all: '**/*' // include all files, may have yml, sh, json, in addition to js\n    },\n    test: {\n      glob: '**/*.js',\n      options: {cwd: 'test'}\n    },\n    watch: {\n      glob: '**/*.js',\n      options: {cwd: 'src'}\n    },\n    dest: 'dist'\n  },\n  stylesheets: {\n    source: {\n      glob: ['*.scss', '!_*.scss'],  // do not compile all files, only non-underscored files\n      options: {cwd: 'src'},\n      all: '**/*.scss'\n    },\n    watch: {\n      glob: '**/*.scss',\n      options: {cwd: 'src'}\n    },\n    dest: 'dist'\n  },\n  images: {\n    source: {options: {cwd: 'images'}},\n    watch: {options: {cwd: 'images'}},\n    dest: 'dist'\n  },\n  postProcessor: {\n    source: {options: {cwd: 'dist'}},\n    watch: {options: {cwd: 'dist'}},\n    dest: 'dist/digest'\n  }\n}\n\nconst PresetNodeSrc = {}\n\nconst PresetNodeLib = {\n  javascripts: {\n    source: { options: {cwd: 'lib'}},\n    watch: {options: {cwd: 'lib'}}\n    //test: {options: {cwd: 'test'}}\n  },\n  stylesheets: {\n    source: {options: {cwd: 'lib'}},\n    watch: {options: {cwd: 'lib'}}\n  },\n  images: {\n    source: {options: {cwd: 'lib'}},\n    watch: {options: {cwd: 'lib'}}\n  }\n}\n\n// Rails, the oddball from a structure consideration\nconst railsJs = 'app/assets/javascripts'\nconst railsSs = 'app/assets/stylesheets'\nconst railsImages = 'app/assets/images'\nconst railsDest = 'public/assets/debug'\nconst PresetRails = {\n  javascripts: {\n    source: {\n      glob: 'application.js',\n      options: {cwd: railsJs}\n    },\n    watch: {options: {cwd: railsJs}},\n    dest: railsDest\n  },\n  stylesheets: {\n    source: {options: {cwd: railsSs}},\n    watch: {options: {cwd: railsSs}},\n    dest: railsDest\n  },\n  images: {\n    source: {options: {cwd: railsImages}},\n    watch: {options: {cwd: railsImages}},\n    dest: railsDest\n  },\n  postProcessor: {\n    source: {options: {cwd: railsDest}},\n    watch: {options: {cwd: railsDest}},\n    dest: 'public/assets/digest'\n  }\n}\n\n\nconst Preset = class {\n  static baseline(overrides = {}) {\n    return extend(true, {}, Baseline, overrides)\n  }\n\n  static nodeLib(overrides = {}) {\n    return extend(true, {}, Baseline, PresetNodeLib, overrides)\n  }\n\n  static nodeSrc(overrides = {}) {\n    return extend(true, {}, Baseline, PresetNodeSrc, overrides)\n  }\n\n  static rails(overrides = {}) {\n\n    return extend(true, {}, Baseline, PresetRails, Rails.baseDirectories(), overrides)\n  }\n\n  /**\n   * Helper to quickly resolve the config from preset based on the presetType\n   *\n   * @param preset\n   * @param configs - ordered set of overrides\n   * @returns {source, watch, dest}\n   */\n  static resolveConfig(preset, ...configs) {\n    if (!preset) {\n      throw new Error(`Preset must be specified.  Please use one from the preset.js or specify a custom preset configuration.`)\n    }\n\n    let configOverrides = extend(true, {}, ...configs)\n    //Util.log(`config before typeConfig: \\n${stringify(configOverrides)}`)\n\n    if (!configOverrides || !configOverrides.presetType) {\n      throw new Error(`presetType must be specified in the config (usually the Default config).  See preset.js for a list of types such as javascripts, stylesheets, etc.`)\n    }\n\n    let typeConfig = null\n    if (configOverrides.presetType !== 'macro') {\n      typeConfig = preset[configOverrides.presetType]\n      if (!typeConfig) {\n        throw new Error(`Unable to resolve configuration for presetType: ${configOverrides.presetType} from preset: ${stringify(preset)}`)\n      }\n    }\n    else {\n      typeConfig = {}\n    }\n\n    // now that we've determined the typeConfig, overlay the overrides\n    let resolved = extend(true, {}, typeConfig, configOverrides)\n\n    //Util.log(`resolved config with preset: \\n${stringify(resolved)}`)\n    return resolved\n  }\n}\nexport default Preset\n","import extend from 'extend'\nimport Util from 'gulp-util'\nimport stringify from 'stringify-object'\n\nexport const Default = {\n  watch: true,\n  debug: false\n}\n\nconst Base = class {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(...configs) {\n    this.config = extend(true, {}, Default, ...configs)\n    this.debug(`[${this.constructor.name}] using resolved config: ${stringify(this.config)}`)\n  }\n\n  // ----------------------------------------------\n  // protected\n  requireValue(value, name) {\n    if (value === undefined || value == null) {\n      this.notifyError(`${name} must be defined, found: ${value}`)\n    }\n  }\n\n  log(msg) {\n    Util.log(msg)\n  }\n\n  debug(msg) {\n    if (this.config.debug) {\n      this.log(`[${Util.colors.cyan('debug')}][${Util.colors.cyan(this.constructor.name)}] ${msg}`)\n    }\n  }\n\n  debugDump(msg, obj) {\n    this.debug(`${msg}:\\n${this.dump(obj)}`)\n  }\n\n  dump(obj) {\n    return stringify(obj)\n  }\n\n  notifyError(error, e) {\n    this.log(error)\n    throw e\n  }\n\n  debugOptions() {\n    return {title: `[${Util.colors.cyan('debug')}][${Util.colors.cyan(this.taskName())}]`}\n  }\n}\n\nexport default Base\n","import Base from './base'\nimport notify from 'gulp-notify'\nimport Util from 'gulp-util'\nimport shelljs from 'shelljs'\n\nexport const Default = {\n  debug: false,\n  watch: true,\n  task: {\n    name: undefined,\n    description: '',\n    prefix: '', // task name prefix\n    suffix: ''  // task name suffix\n  }\n}\n\nconst BaseGulp = class extends Base {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, ...configs) {\n    super(Default, ...configs)\n    this.gulp = gulp\n  }\n\n  taskName() {\n    if (!this.config.task || !this.config.task.name) {\n      return ''\n    }\n\n    //if (!this.config.task.name) {\n    //  this.notifyError(`Expected ${this.constructor.name} to have a task name in the configuration.`)\n    //}\n    return `${this.config.task.prefix}${this.config.task.name}${this.config.task.suffix}`\n  }\n\n  watchTaskName() {\n    if (this.config.watch && this.config.watch.name) {\n      return this.config.watch.name\n    }\n    else {\n      return `${this.taskName()}:watch`\n    }\n  }\n\n  notifyError(error, done) { //, watching = false) {\n\n    //this.debugDump('notifyError', error)\n\n    let lineNumber = (error.lineNumber) ? `Line ${error.lineNumber} -- ` : ''\n    let taskName = error.task || ((this.config.task && this.config.task.name) ? this.taskName() : this.constructor.name)\n\n    let title = `Task [${taskName}] failed`\n    if (error.plugin) {\n      title += ` in [${error.plugin}]`\n    }\n\n    notify({\n      title: title,\n      message: `${lineNumber}See console.`,\n      sound: 'Sosumi' // See: https://github.com/mikaelbr/node-notifier#all-notification-options-with-their-defaults\n    }).write(error)\n\n    let tag = Util.colors.black.bgRed\n    let report = `\\n${tag('    Task:')} [${Util.colors.cyan(taskName)}]\\n`\n\n    if (error.plugin) {\n      report += `${tag('  Plugin:')} [${error.plugin}]\\n`\n    }\n\n    report += `${tag('   Error:')} `\n\n    if (error.message) {\n      report += `${error.message}\\n`\n    }\n    else {\n      report += `${error}\\n`\n    }\n\n    if (error.lineNumber) {\n      report += `${tag('    Line:')} ${error.lineNumber}\\n`\n    }\n\n    if (error.fileName) {\n      report += `${tag('    File:')} ${error.fileName}\\n`\n    }\n    this.log(report)\n\n    // Prevent the 'watch' task from stopping\n    //if (!watching && this.gulp) {\n    if (this.gulp) {\n      // if this is not used, we see \"Did you forget to signal async completion?\", it also unfortunately logs more distracting information below.  But we need to exec the callback with an error to halt execution.\n\n      this.donezo(done, error)\n    }\n    else {\n      throw error\n    }\n  }\n\n  /**\n   * if done is provided, run it\n   *\n   * @param done\n   */\n  donezo(done, error = null) {\n    if (done) {\n      if (error) {\n        this.debug('executing callback with error')\n        done(error)\n      }\n      else {\n        this.debug('executing callback without error')\n        done()\n      }\n    }\n    else {\n      this.debug(`done callback was not provided`)\n    }\n  }\n\n  /**\n   * Wraps shellJs calls that act on the file structure to give better output and error handling\n   * @param command\n   * @param logResult - return output from the execution, defaults to true. If false, will return code instead\n   * @param returnCode - defaults to false which will throw Error on error, true will return result code\n   */\n  exec(command, logResult = true, returnCode = false) {\n    let options = {silent: true}\n    if (this.config.cwd) {\n      options['cwd'] = this.config.cwd\n    }\n    else {\n      this.notifyError('cwd is required')\n    }\n\n    if (command.includes(`undefined`)) {\n      this.notifyError(`Invalid command: ${command}`)\n    }\n\n    this.debug(`Executing \\`${command}\\` with cwd: ${options['cwd']}`)\n    let shellResult = shelljs.exec(command, options)\n    let output = this.logShellOutput(shellResult, logResult);\n\n    if (shellResult.code === 0 || shellResult.code === 1) {\n\n      // ---\n      // determine the return value\n      if (returnCode) {\n        return shellResult.code\n      }\n      else {\n        return output\n      }\n    }\n    else {\n      if (returnCode) {\n        return shellResult.code\n      }\n      else {\n        this.notifyError(`Command failed \\`${command}\\`, cwd: ${options.cwd}: ${shellResult.stderr}.`)\n      }\n    }\n  }\n\n  logShellOutput(shellResult, logResult) {\n    //this.debug(`[exit code] ${shellResult.code}`)\n\n    // ---\n    // Log the result\n    // strangely enough, sometimes useful messages from git are an stderr even when it is a successful command with a 0 result code\n    let output = shellResult.stdout\n    if (output == '') {\n      output = shellResult.stderr\n    }\n\n    //this.log(stringify(shellResult))\n    if (output != '') {\n      if (logResult) {\n        this.log(output)\n      }\n      else {\n        this.debug(`[output] \\n${output}`)\n      }\n    }\n    return output;\n  }\n}\n\nexport default BaseGulp\n","import BaseGulp from './baseGulp'\nimport Preset from './preset'\nimport extend from 'extend'\nimport Util from 'gulp-util'\nimport stringify from 'stringify-object'\n\nexport const Default = {\n  watch: true,\n  debug: false\n}\n\nconst BaseRecipe = class extends BaseGulp {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n\n    super(gulp, extend(true, {},\n      Default,\n      {baseDirectories: preset.baseDirectories},\n      Preset.resolveConfig(preset, ...configs)))\n\n    // in case someone needs to inspect it later i.e. buildControl\n    this.preset = preset\n    this.registerTask()\n    this.registerWatchTask()\n  }\n\n  registerWatchTask() {\n    if (this.config.watch) {\n      // generate watch task e.g. sass:watch\n      let name = this.watchTaskName()\n      this.debug(`Registering task: ${Util.colors.green(name)}`)\n      this.watchFn = () => {\n        this.log(`[${Util.colors.green(name)}] watching ${this.config.watch.glob} ${stringify(this.config.watch.options)}...`)\n\n        return this.gulp.watch(this.config.watch.glob, this.config.watch.options, (event) => {\n          this.log(`File ${event.path} was ${event.type}, running ${this.taskName()}...`);\n          return Promise\n            .resolve(this.run(null, true))\n            .then(() => this.logFinish())\n        })\n      }\n      this.watchFn.description = this.createWatchDescription()\n      this.gulp.task(name, this.watchFn)\n    }\n  }\n\n  createWatchDescription() {\n    return Util.colors.grey(`|___ watches ${this.config.watch.options.cwd}/${this.config.watch.glob}`)\n  }\n\n  registerTask() {\n    // generate primary task e.g. sass\n\n    // set a fn for use by the task, also used by aggregate/series/parallel\n    this.taskFn = (done) => {\n      //this.log(`Running task: ${Util.colors.green(name)}`)\n\n      if (this.config.debug) {\n        this.debugDump(`Executing ${Util.colors.green(this.taskName())} with options:`, this.config.options)\n      }\n      return this.run(done)\n    }\n\n    if (this.config.task && this.config.task.name) {\n      let name = this.taskName()\n      if (this.createDescription !== undefined) {\n        this.config.task.description = this.createDescription()\n      }\n\n      this.debug(`Registering task: ${Util.colors.green(name)}`)\n\n      // set metadata on fn for discovery by gulp\n      this.taskFn.displayName = name\n      this.taskFn.description = this.config.task.description\n\n      // register the task\n      this.gulp.task(name, this.taskFn)\n    }\n  }\n\n  logFinish(message = 'finished.') {\n    this.log(`[${Util.colors.green(this.taskName())}] ${message}`)\n  }\n}\n\nexport default BaseRecipe\n","import BaseRecipe from './baseRecipe'\nimport eslint from 'gulp-eslint'\nimport extend from 'extend'\n//import jscs from 'gulp-jscs'\n//import stylish from 'gulp-jscs-stylish'\nimport debug from 'gulp-debug'\nimport gulpif from 'gulp-if'\n\nexport const Default = {\n  debug: false,\n  presetType: 'javascripts',\n  task: {\n    name: 'eslint'\n  },\n  source: {\n    glob: '**/*.js'\n  },\n  options: {}\n}\n\nconst EsLint = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, extend(true, {}, Default, ...configs))\n  }\n\n  createDescription(){\n    return `Lints ${this.config.source.options.cwd}/${this.config.source.glob}`\n  }\n\n  run(done, watching = false) {\n    // eslint() attaches the lint output to the \"eslint\" property of the file object so it can be used by other modules.\n    return this.gulp.src(this.config.source.glob, this.config.source.options)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(eslint(this.config.options))\n      .pipe(eslint.format()) // outputs the lint results to the console. Alternatively use eslint.formatEach() (see Docs).\n      .pipe(gulpif(!watching, eslint.failAfterError())) // To have the process exit with an error code (1) on lint error, return the stream and pipe to failAfterError last.\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n\n    // FIXME: even including any remnant of JSCS at this point broke everything through the unfound requirement of babel 5.x through babel-jscs.  I can't tell where this occurred, but omitting gulp-jscs for now gets me past this issue.  Revisit this when there are clear updates to use babel 6\n    //.pipe(jscs())      // enforce style guide\n    //.pipe(stylish())  // log style errors\n    //.pipe(jscs.reporter('fail')) // fail on error\n  }\n}\n\nexport default EsLint\n","import BaseRecipe from './baseRecipe'\nimport uglify from 'gulp-uglify'\nimport debug from 'gulp-debug'\nimport gulpif from 'gulp-if'\nimport sourcemaps from 'gulp-sourcemaps'\nimport concat from 'gulp-concat'\nimport extReplace from 'gulp-ext-replace'\nimport glob from 'glob'\n\nexport const Default = {\n  debug: false,\n  presetType: 'postProcessor',\n  task: {\n    name: 'uglify'\n  },\n  source: {\n    glob: '**/*.js'\n  },\n  options: {\n    compress: {\n      warnings: true\n    },\n    mangle: false,\n    preserveComments: /^!|@preserve|@license|@cc_on/i\n  },\n\n  concat: {\n    dest: undefined // if specified, will use concat to this dest filename, OTHERWISE, it will just assume one file and rename to .min.js\n  }\n}\n\n/**\n * By default, assumes ONE source glob file match, OTHERWISE specify {concat: { dest: 'out.min.js' } }\n *\n */\nconst Uglify = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  createDescription() {\n    let msg = `Uglifies ${this.config.source.options.cwd}/${this.config.source.glob} to ${this.config.dest}`\n    if (this.config.concat.dest) {\n      msg += `/${this.config.concat.dest}`\n    }\n    return msg\n  }\n\n  run(done, watching = false) {\n\n    // helpful log message if files not found\n    let files = glob.sync(this.config.source.glob, this.config.source.options)\n    if (!files || files.length <= 0) {\n      this.log(`No sources found to uglify in: ${this.dump(this.config.source)}`)\n    }\n\n    if (this.config.concat.dest) {\n\n      // run the concat scenario\n      this.debug(`concat dest: ${this.config.concat.dest}`)\n      return this.gulp.src(this.config.source.glob, this.config.source.options)\n        .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n        .pipe(concat(this.config.concat.dest))\n\n        // identical to below\n        .pipe(sourcemaps.init())\n        .pipe(uglify(this.config.options))\n        .on('error', (error) => {\n          this.notifyError(error, done, watching)\n        })\n        .pipe(this.gulp.dest(this.config.dest))\n    }\n    else {\n\n      // run the single file scenario\n      this.debug('single file with no dest')\n\n      if (files.length > 1) {\n        throw new Error(`Should only find one file but found ${files.length} for source: ${this.dump(this.config.source)}.  Use the concat: {dest: 'output.min.js' } configuration for multiple files concatenated with uglify.`)\n      }\n\n      return this.gulp.src(this.config.source.glob, this.config.source.options)\n        .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n        .pipe(extReplace('.min.js'))\n\n        // identical to above\n        .pipe(sourcemaps.init())\n        .pipe(uglify(this.config.options))\n        .on('error', (error) => {\n          this.notifyError(error, done, watching)\n        })\n        .pipe(this.gulp.dest(this.config.dest))\n    }\n  }\n}\n\nexport default Uglify\n","import BaseRecipe from './baseRecipe'\nimport autoprefixer from 'gulp-autoprefixer'\nimport gulpif from 'gulp-if'\nimport debug from 'gulp-debug'\n\nexport const Default = {\n  options: {  // from bootstrap\n    browsers: [\n      //\n      // Official browser support policy:\n      // http://v4-alpha.getbootstrap.com/getting-started/browsers-devices/#supported-browsers\n      //\n      'Chrome >= 35', // Exact version number here is kinda arbitrary\n      // Rather than using Autoprefixer's native \"Firefox ESR\" version specifier string,\n      // we deliberately hardcode the number. This is to avoid unwittingly severely breaking the previous ESR in the event that:\n      // (a) we happen to ship a new Bootstrap release soon after the release of a new ESR,\n      //     such that folks haven't yet had a reasonable amount of time to upgrade; and\n      // (b) the new ESR has unprefixed CSS properties/values whose absence would severely break webpages\n      //     (e.g. `box-sizing`, as opposed to `background: linear-gradient(...)`).\n      //     Since they've been unprefixed, Autoprefixer will stop prefixing them,\n      //     thus causing them to not work in the previous ESR (where the prefixes were required).\n      'Firefox >= 31', // Current Firefox Extended Support Release (ESR)\n      // Note: Edge versions in Autoprefixer & Can I Use refer to the EdgeHTML rendering engine version,\n      // NOT the Edge app version shown in Edge's \"About\" screen.\n      // For example, at the time of writing, Edge 20 on an up-to-date system uses EdgeHTML 12.\n      // See also https://github.com/Fyrd/caniuse/issues/1928\n      'Edge >= 12',\n      'Explorer >= 9',\n      // Out of leniency, we prefix these 1 version further back than the official policy.\n      'iOS >= 8',\n      'Safari >= 8',\n      // The following remain NOT officially supported, but we're lenient and include their prefixes to avoid severely breaking in them.\n      'Android 2.3',\n      'Android >= 4',\n      'Opera >= 12'\n    ]\n  }\n}\n\nconst Autoprefixer = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  run(done, watching = false) {\n    // FIXME: is this right or wrong?  this class initially was extracted for reuse of Default options\n    return this.gulp.src(this.config.source)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(autoprefixer(this.config.options))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n      .pipe(this.gulp.dest(this.config.dest))\n  }\n}\n\nexport default Autoprefixer\n","import BaseRecipe from './baseRecipe'\nimport BrowserSync from 'browser-sync'\nimport debug from 'gulp-debug'\nimport extend from 'extend'\nimport gulpif from 'gulp-if'\nimport changed    from 'gulp-changed'\nimport imagemin   from 'gulp-imagemin'\nimport merge from 'merge-stream'\nimport path from 'path'\n\nexport const Default = {\n  debug: false,\n  presetType: 'images',\n  task: {\n    name: 'images'\n  },\n  watch: {\n    glob: '**',\n    options: {\n      //cwd: ** resolved from preset **\n    }\n  },\n  source: {\n    // baseDirectories: [] ** resolved from preset **\n    glob: '**',\n    options: {\n      //cwd: ** resolved from preset **\n    }\n  },\n  options: {}\n}\n\nconst Images = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, extend(true, {}, Default, ...configs))\n    this.browserSync = BrowserSync.create()\n  }\n\n  createDescription() {\n    return `Minifies change images from ${this.config.source.options.cwd}/${this.config.source.glob}`\n  }\n\n  run(done, watching = false) {\n\n    var tasks = this.config.baseDirectories.map((baseDirectory) => {\n      // join the base dir with the relative cwd\n      return this.runOne(done, path.join(baseDirectory, this.config.source.options.cwd), watching)\n    })\n    return merge(tasks);\n  }\n\n  runOne(done, cwd, watching) {\n\n    // setup a run with a single cwd a.k.a base directory FIXME: perhaps this could be in the base recipe? or not?\n    let options = extend({}, this.config.source.options)\n    options.cwd = cwd\n    this.debug(`src: ${cwd}/${this.config.source.glob}`)\n\n    return this.gulp.src(this.config.source.glob, options)\n      .pipe(changed(this.config.dest)) // ignore unchanged files\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(imagemin(this.config.options))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n      .pipe(this.gulp.dest(this.config.dest))\n      .pipe(this.browserSync.stream())\n  }\n}\n\nexport default Images\n","import BaseRecipe from './baseRecipe'\nimport { Default as AutoprefixerDefault } from './autoprefixer'\nimport autoprefixer from 'gulp-autoprefixer'\nimport BrowserSync from 'browser-sync'\nimport debug from 'gulp-debug'\nimport extend from 'extend'\nimport sass from 'gulp-sass'\nimport sourcemaps from 'gulp-sourcemaps'\nimport gulpif from 'gulp-if'\n\nimport findup from 'findup-sync'\nconst node_modules = findup('node_modules')\n\nexport const Default = {\n  debug: false,\n  presetType: 'stylesheets',\n  task: {\n    name: 'sass'\n  },\n  options: {\n    // WARNING: `includePaths` this should be a fully qualified path if overriding\n    //  @see https://github.com/sass/node-sass/issues/1377\n    includePaths: [node_modules] // this will find any node_modules above the current working directory\n  },\n  // capture defaults from autoprefixer class\n  autoprefixer: {\n    options: AutoprefixerDefault.options\n  }\n}\n\nconst Sass = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, extend(true, {}, Default, ...configs))\n    this.browserSync = BrowserSync.create()\n  }\n\n  createDescription() {\n    return `Compiles ${this.config.source.options.cwd}/${this.config.source.glob}`\n  }\n\n  run(done, watching = false) {\n    // add debug for importing problems (can be very helpful)\n    if(this.config.debug && this.config.options.importer === undefined) {\n      this.config.options.importer = (url, prev, done) => {\n        this.debug(`importing ${url} from ${prev}`)\n        done({file: url})\n      }\n    }\n\n    return this.gulp.src(this.config.source.glob, this.config.source.options)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(sourcemaps.init())\n      .pipe(sass(this.config.options))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n      .pipe(autoprefixer(this.config.autoprefixer.options))\n      .pipe(sourcemaps.write())\n      .pipe(this.gulp.dest(this.config.dest))\n      .pipe(this.browserSync.stream())\n  }\n}\n\nexport default Sass\n","import BaseRecipe from './baseRecipe'\nimport extend from 'extend'\nimport scssLint from 'gulp-scss-lint'\nimport scssLintStylish from 'gulp-scss-lint-stylish'\nimport debug from 'gulp-debug'\nimport gulpif from 'gulp-if'\n\nexport const Default = {\n  debug: false,\n  presetType: 'stylesheets',\n  task: {\n    name: 'scsslint'\n  },\n  source: {\n    glob: '**/*.scss'\n  },\n  options: {\n    customReport: scssLintStylish\n  }\n}\n\nconst ScssLint = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, extend(true, {}, Default, ...configs))\n  }\n\n  createDescription(){\n    return `Lints ${this.config.source.options.cwd}/${this.config.source.glob}`\n  }\n\n  run(done, watching = false) {\n    return this.gulp.src(this.config.source.glob, this.config.source.options)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(scssLint(this.config.options))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n  }\n}\n\nexport default ScssLint\n","import BaseGulp from './baseGulp'\n//import Recipes from './util/recipes'\nimport Util from 'gulp-util'\n\nconst Default = {\n  debug: false,\n  watch: true  // register a watch task that aggregates all watches and runs the full sequence\n}\n\nconst Aggregate = class extends BaseGulp {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param configs - customized overrides\n   */\n  constructor(gulp, taskName, recipes, ...configs) {\n    super(gulp, Default, {task: {name: taskName}}, ...configs)\n\n    if(Array.isArray(recipes)){\n      this.notifyError(`recipes must not be an array, but a function, series, or parallel, found: ${recipes}`)\n    }\n\n    // track recipes as taskFn so that aggregates can be included and resolved as part of other aggregates just like recipes\n    this.taskFn = recipes\n    this.registerTask(this.taskName())\n\n    if (this.config.watch) {\n      this.registerWatchTask(this.watchTaskName())\n    }\n  }\n\n  createHelpText() {\n    //let taskNames = new Recipes().toTasks(this.taskFn)\n    //\n    //// use the config to generate the dynamic help\n    //return `Runs [${taskNames.join(', ')}]`\n    return ''\n  }\n\n  createWatchHelpText() {\n    let taskNames = this.watchableRecipes().reduce((a, b) => {\n      return a.concat(b.taskName())\n    }, [])\n\n    return Util.colors.grey(`|___ aggregates watches from [${taskNames.join(', ')}] and runs all tasks on any change`)\n  }\n\n  registerTask(taskName) {\n    //let tasks = this.toTasks(this.taskFn)\n    //this.debug(`Registering task: ${Util.colors.green(taskName)} for ${stringify(tasks)}`)\n    this.gulp.task(taskName, this.taskFn)\n    this.taskFn.description = this.createHelpText()\n  }\n\n  registerWatchTask(taskName) {\n    // generate watch task\n    let watchableRecipes = this.watchableRecipes()\n    if (watchableRecipes.length < 1) {\n      this.debug(`No watchable recipes for task: ${Util.colors.green(taskName)}`)\n      return\n    }\n\n    this.debug(`Registering task: ${Util.colors.green(taskName)}`)\n\n    // on error ensure that we reset the flag so that it runs again\n    this.gulp.on('error', () => {\n      this.debug(`Yay! listened for the error and am able to reset the running flag!`)\n      this.taskFn.running = false\n    })\n\n\n    let watchFn = () => {\n      // watch the watchable recipes and make them #run the series\n      for (let recipe of watchableRecipes) {\n        this.log(`[${Util.colors.green(taskName)}] watching for ${recipe.taskName()} ${recipe.config.watch.glob}...`)\n\n        // declare this in here so we can use different display names in the log\n        let runFn = (done) => {\n          // ensure that multiple watches do not run the entire set of recipes multiple times on a single change\n          if (this.taskFn.running) {\n            this.debug('Multiple matching watchers, skipping this one...')\n            done()\n            return\n          }\n          else {\n            this.debug('Allowing it to run....')\n            this.taskFn.running = true\n          }\n\n          let finishFn = () => {\n            this.log(`[${Util.colors.green(taskName)}] finished`)\n            this.taskFn.running = false\n          }\n\n          this.gulp.series(this.taskFn, finishFn, done)()\n        }\n        runFn.displayName = `${recipe.taskName()} watcher`\n\n        let watcher = this.gulp.watch(recipe.config.watch.glob, recipe.config.watch.options, runFn)\n        let recipeName = Util.colors.grey(`(${recipe.taskName()})`)\n        // add watchers for logging/information\n        watcher.on('add', (path) => {\n          if (!this.taskFn.running) {\n            this.log(`[${Util.colors.green(taskName)} ${recipeName}] ${path} was added, running...`)\n          }\n        })\n        watcher.on('change', (path) => {\n          if (!this.taskFn.running) {\n            this.log(`[${Util.colors.green(taskName)} ${recipeName}] ${path} was changed, running...`)\n          }\n        })\n        watcher.on('unlink', (path) => {\n          if (!this.taskFn.running) {\n            this.log(`[${Util.colors.green(taskName)} ${recipeName}] ${path} was deleted, running...`)\n          }\n        })\n      }\n    }\n\n\n    watchFn.description = this.createWatchHelpText()\n    this.gulp.task(taskName, watchFn)\n  }\n\n  flatten(list) {\n    return list.reduce((a, b) =>\n      // parallel and series set `.recipes` on the function as metadata\n      a.concat((typeof b === \"function\" && b.recipes) ? this.flatten(b.recipes) : b), [])\n  }\n\n  flattenedRecipes() {\n    let recipes = this.flatten([this.taskFn])\n    this.debugDump(`flattenedRecipes`, recipes)\n    return recipes\n  }\n\n  watchableRecipes() {\n    // create an array of watchable recipes\n    let watchableRecipes = []\n    for (let recipe of this.flattenedRecipes()) {\n      if ((typeof recipe !== \"string\") && recipe.config.watch) {\n        watchableRecipes.push(recipe)\n      }\n    }\n    return watchableRecipes\n  }\n}\n\nexport default Aggregate\n","import BaseRecipe from './baseRecipe'\nimport { rollup } from 'rollup'\n//import BrowserSync from 'browser-sync'\nimport extend from 'extend'\nimport glob from 'glob'\nimport stringify from 'stringify-object'\nimport nodeResolve from 'rollup-plugin-node-resolve'\nimport commonjs from 'rollup-plugin-commonjs'\nimport process from 'process'\nimport findup from 'findup-sync'\nconst node_modules = findup('node_modules')\n\n\nexport const Default = {\n  debug: false,\n  presetType: 'javascripts',\n  task: {\n    name: 'rollup:es'\n  },\n  options: {\n    //entry: 'src/index.js', // ** resolved from the source glob/cwd **\n    //dest: '', // ** resolved from preset **\n    sourceMap: true,\n    format: 'es6',\n    plugins: []\n  }\n}\n\n// This nodeResolve configuration is not used unless it is within the plugins: [nodeResolve(this.config.nodeResolve.options)] - pass this.config.nodeResolve.enabled == true in config to enable default options\nexport const NodeResolve = {\n  nodeResolve: {\n    enabled: false,\n\n    // - see https://github.com/rollup/rollup-plugin-node-resolve\n    options: {\n      // use \"jsnext:main\" if possible\n      // – see https://github.com/rollup/rollup/wiki/jsnext:main\n      jsnext: true,\n\n      // use \"main\" field or index.js, even if it's not an ES6 module (needs to be converted from CommonJS to ES6\n      // – see https://github.com/rollup/rollup-plugin-commonjs\n      main: true,\n\n      //skip: [ 'some-big-dependency' ], // if there's something your bundle requires that you DON'T want to include, add it to 'skip'\n\n      // By default, built-in modules such as `fs` and `path` are treated as external if a local module with the same name\n      // can't be found. If you really want to turn off this behaviour for some reason, use `builtins: false`\n      builtins: false,\n\n      // Some package.json files have a `browser` field which specifies alternative files to load for people bundling\n      // for the browser. If that's you, use this option, otherwise pkg.browser will be ignored.\n      browser: true,\n\n      // not all files you want to resolve are .js files\n      extensions: [ '.js', '.json' ]\n    }\n  }\n}\n\nexport const CommonJs = {\n  commonjs: {\n    enabled: false,\n    options: {\n      include: `${node_modules}/**`,\n      //exclude: [ `${node_modules}/foo/**', `${node_modules}/bar/**` ],\n\n      // search for files other than .js files (must already be transpiled by a previous plugin!)\n      extensions: [ '.js' ] // defaults to [ '.js' ]\n    }\n  }\n}\n\nconst RollupEs = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    let config = extend(true, {}, ...configs)\n\n    if (!config.options.dest) {\n      throw new Error(`options.dest filename must be specified.`)\n    }\n\n    super(gulp, preset, Default, NodeResolve, CommonJs, config)\n\n    // Utilize the presets to get the dest cwd/base directory, then add the remaining passed-in file path/name\n    this.config.options.dest = `${this.config.dest}/${this.config.options.dest}`\n\n    //----------------------------------------------\n    // plugins order: nodeResolve, commonjs, babel\n\n    // Add commonjs before babel\n    if(this.config.commonjs.enabled) {\n      this.debug('Adding commonjs plugin')\n      // add at the beginning\n      this.config.options.plugins.unshift(commonjs(this.config.commonjs.options))\n    }\n\n    // Add nodeResolve before (commonjs &&|| babel)\n    if(this.config.nodeResolve.enabled) {\n      this.debug('Adding nodeResolve plugin')\n      // add at the beginning\n      this.config.options.plugins.unshift(nodeResolve(this.config.nodeResolve.options))\n    }\n\n    //this.browserSync = BrowserSync.create()\n  }\n\n  resolveEntry() {\n    // Resolve the source and make sure there is one entry point\n    if (Array.isArray(this.config.source.glob)) {\n      throw new Error(`Rollup only accepts one entry point.  Found array for source.glob: ${this.config.source.glob}`)\n    }\n    // get full path results\n    this.config.source.options['realpath'] = true\n\n    let entry = glob.sync(this.config.source.glob, this.config.source.options)\n\n    if (!entry || entry.length <= 0) {\n      throw new Error(`Unable to resolveEntry() for source: ${stringify(this.config.source)} from ${process.cwd()}`)\n    }\n\n    if (entry.length > 1) {\n      throw new Error(`resolveEntry() should only find one entry point but found ${entry} for source: ${stringify(this.config.source)}`)\n    }\n    return entry[0]\n  }\n\n  createDescription(){\n    return `Rollup ${this.config.source.options.cwd}/${this.config.source.glob} in the ${this.config.options.format} format to ${this.config.options.dest}`\n  }\n\n  run(done, watching = false) {\n    let options = extend(true, {\n        entry: this.resolveEntry(),\n        onwarn: (message) => {\n          //this.notifyError(message, watching)\n          this.log(message)\n        }\n      },\n      this.config.options)\n\n    if(this.config.debug) {\n      let prunedOptions = extend(true, {}, options)\n      prunedOptions.plugins = `[ (count: ${this.config.options.plugins.length}) ]`\n      this.debug(`Executing rollup with options: ${stringify(prunedOptions)}`)\n    }\n\n    return rollup(options)\n      .then((bundle) => {\n        return bundle.write(options)\n      })\n      .catch((error) => {\n        error.plugin = 'rollup'\n        this.notifyError(error, done, watching)\n      })\n  }\n}\n\nexport default RollupEs\n","import RollupEs from './rollupEs'\nimport babel from 'rollup-plugin-babel';\n\nexport const Default = {\n  task: {\n    name: 'rollup:cjs'\n  },\n  options: {\n    //dest: '', // required\n    format: 'cjs',\n    plugins: [babel({\n      babelrc: false,\n      presets: ['es2015-rollup']\n    })]\n  },\n  nodeResolve: {\n    enabled: false // bundle a full package with dependencies?\n  },\n  commonjs: {\n    enabled: false // convert dependencies to commonjs modules for rollup\n  }\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst RollupCjs = class extends RollupEs {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n}\n\nexport default RollupCjs\n","import RollupCjs from './rollupCjs'\n\nexport const Default = {\n  task: {\n    name: 'rollup:cjs-bundled'\n  },\n  nodeResolve: {\n    enabled: true // bundle a full package with dependencies? (if not use RollupCjs itself)\n  },\n  commonjs: {\n    enabled: true // convert dependencies to commonjs modules for rollup\n  }\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst RollupCjsBundled = class extends RollupCjs {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n}\n\nexport default RollupCjsBundled\n","import RollupCjsBundled from './rollupCjsBundled'\n\nexport const Default = {\n  task: {\n    name: 'rollup:iife'\n  },\n  options: {\n    //dest: '', // required\n    format: 'iife'\n  }\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst RollupIife = class extends RollupCjsBundled {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n}\n\nexport default RollupIife\n","import RollupCjs from './rollupCjs'\n\nexport const Default = {\n  task: {\n    name: 'rollup:amd'\n  },\n  options: {\n    //dest: '', // required\n    format: 'amd'\n  }\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst RollupAmd = class extends RollupCjs {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n}\n\nexport default RollupAmd\n","import RollupCjs from './rollupCjs'\n\nexport const Default = {\n  task: {\n    name: 'rollup:umd'\n  },\n  options: {\n    //dest: '', // required\n    format: 'umd'\n  }\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst RollupUmd = class extends RollupCjs {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n}\n\nexport default RollupUmd\n","import Base from '../base'\nimport fs from 'fs-extra'\nimport path from 'path'\nimport fileSyncCmp from 'file-sync-cmp'\nimport process from 'process'\nimport iconv from 'iconv-lite'\nimport {Buffer} from 'buffer'\n\nconst isWindows = (process.platform === 'win32')\nconst pathSeparatorRe = /[\\/\\\\]/g;\n\n/**\n * Implementation can use our base class, but is exposed as static methods in the exported File class\n *\n * TODO: reducing the amount of code by using other maintained libraries would be fantastic.  Worst case, break most of this into it's own library?\n *\n *  @credit to grunt for the grunt.file implementation. See license for attribution.\n */\nconst FileImplementation = class extends Base {\n  constructor(config = {}) {\n    super({encoding: \"utf8\"}, config)\n  }\n\n  // Read a file, optionally processing its content, then write the output.\n  copy(srcpath, destpath, options) {\n    if (!options) {\n      options = {}\n    }\n    // If a process function was specified, process the file's source.\n\n    // If the file will be processed, use the encoding as-specified. Otherwise, use an encoding of null to force the file to be read/written as a Buffer.\n    let readWriteOptions = options.process ? options : {encoding: null}\n\n    let contents = this.read(srcpath, readWriteOptions)\n    if (options.process) {\n      this.debug('Processing source...')\n      try {\n        contents = options.process(contents, srcpath)\n      }\n      catch (e) {\n        this.notifyError(`Error while executing process function on ${srcpath}.`, e)\n      }\n    }\n    // Abort copy if the process function returns false.\n    if (contents === false) {\n      this.debug('Write aborted, no contents.')\n    }\n    else {\n      this.write(destpath, contents, readWriteOptions)\n    }\n  }\n\n  syncTimestamp(src, dest) {\n    let stat = fs.lstatSync(src)\n    if (path.basename(src) !== path.basename(dest)) {\n      return\n    }\n\n    if (stat.isFile() && !fileSyncCmp.equalFiles(src, dest)) {\n      return\n    }\n\n    let fd = fs.openSync(dest, isWindows ? 'r+' : 'r')\n    fs.futimesSync(fd, stat.atime, stat.mtime)\n    fs.closeSync(fd)\n  }\n\n  write(filepath, contents, options) {\n    if (!options) {\n      options = {}\n    }\n    // Create path, if necessary.\n    this.mkdir(path.dirname(filepath))\n    try {\n      // If contents is already a Buffer, don't try to encode it. If no encoding was specified, use the default.\n      if (!Buffer.isBuffer(contents)) {\n        contents = iconv.encode(contents, options.encoding || this.config.encoding)\n      }\n      // Actually write this.\n      fs.writeFileSync(filepath, contents)\n\n      return true\n    }\n    catch (e) {\n      this.notifyError(`Unable to write ${filepath} file (Error code: ${e.code}).`, e)\n    }\n  }\n\n  // Read a file, return its contents.\n  read(filepath, options) {\n    if (!options) {\n      options = {}\n    }\n    let contents\n    this.debug(`Reading ${filepath}...`)\n    try {\n      contents = fs.readFileSync(String(filepath))\n      // If encoding is not explicitly null, convert from encoded buffer to a\n      // string. If no encoding was specified, use the default.\n      if (options.encoding !== null) {\n        contents = iconv.decode(contents, options.encoding || this.config.encoding)\n        // Strip any BOM that might exist.\n        if (!this.config.preserveBOM && contents.charCodeAt(0) === 0xFEFF) {\n          contents = contents.substring(1)\n        }\n      }\n\n      return contents\n    }\n    catch (e) {\n      this.notifyError('Unable to read \"' + filepath + '\" file (Error code: ' + e.code + ').', e)\n    }\n  }\n\n  /**\n   * Like mkdir -p. Create a directory and any intermediary directories.\n   * @param dirpath\n   * @param mode\n   */\n  mkdir(dirpath, mode) {\n    // Set directory mode in a strict-mode-friendly way.\n    if (mode == null) {\n      mode = parseInt('0777', 8) & (~process.umask())\n    }\n    dirpath.split(pathSeparatorRe).reduce((parts, part) => {\n      parts += part + '/'\n      let subpath = path.resolve(parts)\n      if (!this.exists(subpath)) {\n        try {\n          fs.mkdirSync(subpath, mode)\n        }\n        catch (e) {\n          this.notifyError(`Unable to create directory ${subpath} (Error code: ${e.code}).`, e)\n        }\n      }\n      return parts\n    }, '')\n  }\n\n  /**\n   * Match a filepath or filepaths against one or more wildcard patterns.\n   * @returns true if any of the patterns match.\n   */\n  isMatch(...args) {\n    return this.match(...args).length > 0\n  }\n\n  exists(...args) {\n    let filepath = path.join(...args)\n    return fs.existsSync(filepath)\n  }\n\n  isDir(...args) {\n    let filepath = path.join(...args)\n    return this.exists(filepath) && fs.statSync(filepath).isDirectory()\n  }\n\n  detectDestType(dest) {\n    if (dest.endsWith('/')) {\n      return 'directory'\n    }\n    else {\n      return 'file'\n    }\n  }\n}\n\n\nconst File = class {\n  static copy(srcpath, destpath, options) {\n    return instance.copy(srcpath, destpath, options)\n  }\n\n  static syncTimestamp(src, dest) {\n    return instance.syncTimestamp(src, dest)\n  }\n\n  static write(filepath, contents, options) {\n    return instance.write(filepath, contents, options)\n  }\n\n  static read(filepath, options) {\n    return instance.read(filepath, options)\n  }\n\n  static isDir(...args) {\n    return instance.isDir(...args)\n  }\n\n  static mkdir(dirpath, mode) {\n    return instance.mkdir(dirpath, mode)\n  }\n\n  static isMatch(...args) {\n    return instance.isMatch(...args)\n  }\n\n  static exists(...args) {\n    return instance.exists(...args)\n  }\n\n  static detectDestType(dest) {\n    return instance.detectDestType(dest)\n  }\n}\n\n//  singleton\nlet instance = new FileImplementation()\n\nexport default File\n","import BaseRecipe from './baseRecipe'\nimport File from './util/file'\nimport extend from 'extend'\n//import fs from 'fs-extra'\nimport path from 'path'\nimport chalk from 'chalk'\nimport process from 'process'\nimport globAll from 'glob-all'\nimport fs from 'fs-extra'\n\nconst Default = {\n  debug: false,\n  watch: false,\n  presetType: 'macro',\n  task: {\n    name: 'copy'\n  },\n  process: (content, srcpath) => {  // eslint-disable-line no-unused-vars\n    return content\n  }, // allows modification of the file content before writing to destination\n  encoding: 'utf8',\n  mode: false,            // True will copy the existing file/directory permissions, otherwise set the mode e.g. 0644\n  timestamp: false,       // Preserve the timestamp attributes(atime and mtime) when copying files. Timestamp will not be preserved\n  //                        //    when the file contents or name are changed during copying.\n  //preserveBOM: false,     // Whether to preserve the BOM on this.read rather than strip it.\n\n  source: {\n    glob: undefined,      // [] or string glob pattern, uses node-glob-all https://github.com/jpillora/node-glob-all#usage\n    options: {            // https://github.com/isaacs/node-glob#options\n      cwd: process.cwd()  // base path\n    }\n  },\n  dest: undefined,         // base path\n  options: {}\n}\n\n/**\n *  Copy files to a destination with permissions and processing options.\n *\n *  TODO: reducing the amount of code by using other maintained libraries would be fantastic.  Worst case, break most of this into it's own library?\n *\n *  @credit to grunt and grunt-contrib-copy for the implementation. See license for attribution.\n */\nconst Copy = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, extend(true, {}, Default, ...configs))\n\n    this.requireValue(this.config.source.glob, `source.glob`)\n    this.requireValue(this.config.source.options.cwd, `source.options.cwd`)\n    this.requireValue(this.config.dest, `dest`)\n\n    // ensure array\n    if (!Array.isArray(this.config.source.glob)) {\n      this.config.source.glob = [this.config.source.glob]\n    }\n  }\n\n  createDescription() {\n    return `Copies ${this.config.source.options.cwd}/${this.config.source.glob} to ${this.config.dest}`\n  }\n\n  chmod(from, to) {\n    if (this.config.mode !== false) {\n      fs.chmodSync(to, (this.config.mode === true) ? fs.lstatSync(from).mode : this.config.mode)\n    }\n  }\n\n  run(done) {\n    try {\n      let dirs = {}\n      let tally = {\n        dirs: 0,\n        files: 0\n      }\n      let copyOptions = {\n        encoding: this.config.encoding,\n        process: this.config.process\n      }\n\n      let options = extend(true, {}, this.config.source.options, {realpath: true})\n      let pattern = this.config.source.glob\n\n      // ensure pattern is an array\n      if (!Array.isArray(pattern)) {\n        pattern = [pattern]\n      }\n\n      // make a copy so that nothing processing will alter the config values\n      pattern = pattern.slice()\n\n      this.log(`Copying ${options.cwd}/${pattern}...`)\n      //this.debugDump(`this config: `, this.config)\n\n      for (let fromFullPath of globAll.sync(pattern, options)) {\n        let from = path.relative(process.cwd(), fromFullPath)\n        let toRelative = path.relative(options.cwd, from) // grab the path of the file relative to the cwd of the source cwd - allows nesting\n        let to = path.join(this.config.dest, toRelative)\n\n        if (File.isDir(from)) {\n          this.log(`\\t${chalk.cyan(to)}`)\n          File.mkdir(to)\n          this.chmod(from, to)\n          dirs[from] = to\n          tally.dirs++\n        }\n        else {\n          this.log(`\\t-> ${chalk.cyan(to)}`)\n          File.copy(from, to, copyOptions)\n          if (this.config.timestamp) {\n            File.syncTimestamp(from, to)\n          }\n          this.chmod(from, to)\n          tally.files++\n        }\n      }\n\n      if (this.config.timestamp) {\n        for (let from of Object.keys(dirs)) {\n          File.syncTimestamp(from, dirs[from])\n        }\n      }\n\n      let msg = ''\n      if (tally.dirs) {\n        msg += `Created ${chalk.cyan(tally.dirs.toString()) + (tally.dirs === 1 ? ' directory' : ' directories')}`\n      }\n\n      if (tally.files) {\n        msg += (tally.dirs ? ', copied ' : 'Copied ') + chalk.cyan(tally.files.toString()) + (tally.files === 1 ? ' file' : ' files')\n      }\n\n      this.log(msg)\n      this.donezo(done)\n    }\n    catch (error) {\n      this.notifyError(error, done)\n    }\n  }\n}\n\nexport default Copy\n","import BaseRecipe from './baseRecipe'\nimport extend from 'extend'\nimport del from 'del'\n\nexport const Default = {\n  debug: false,\n  watch: false,\n  sync: true  // necessary so that tasks can be run in a series, can be overriden for other purposes\n}\n\nconst BaseClean = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, config = {}) {\n    super(gulp, preset, extend(true, {}, Default, config))\n  }\n\n  createDescription(){\n    // use the config to generate the dynamic help\n    return `Cleans ${this.config.dest}`\n  }\n\n  run(done, watching = false) {\n    if (this.config.sync) {\n      let paths = del.sync(this.config.dest)\n      this.logDeleted(paths)\n    }\n    else {\n      return del(this.config.dest)\n        .then((paths) => {\n          this.logDeleted(paths)\n        })\n        .catch((error) => {\n          error.plugin = 'del'\n          this.notifyError(error, watching)\n        })\n    }\n\n    this.donezo(done)\n  }\n\n  logDeleted(paths) {\n    if (paths.length > 0) {\n      this.log(`Deleted files and folders:`)\n      for(let path of paths){\n        this.log(`    ${path}`)\n      }\n    }\n  }\n}\n\nexport default BaseClean\n","import BaseClean from './baseClean'\nimport extend from 'extend'\n\nexport const Default = {\n  presetType: 'images',\n  task: {\n    name: 'clean:images'\n  }\n}\n\nconst CleanImages = class extends BaseClean {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, extend(true, {}, Default, ...configs))\n  }\n}\n\nexport default CleanImages\n","import BaseClean from './baseClean'\nimport extend from 'extend'\n\nexport const Default = {\n  presetType: 'stylesheets',\n  task: {\n    name: 'clean:stylesheets'\n  }\n}\n\nconst CleanStylesheets = class extends BaseClean {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, extend(true, {}, Default, ...configs))\n  }\n}\n\nexport default CleanStylesheets\n","import BaseClean from './baseClean'\nimport extend from 'extend'\n\nexport const Default = {\n  presetType: 'javascripts',\n  task: {\n    name: 'clean:javascripts'\n  }\n}\n\nconst CleanJavascripts = class extends BaseClean {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, extend(true, {}, Default, ...configs))\n  }\n}\n\nexport default CleanJavascripts\n","import BaseClean from './baseClean'\nimport extend from 'extend'\n\nexport const Default = {\n  presetType: 'postProcessor',\n  task: {\n    name: 'clean:digest'\n  }\n}\n\nconst CleanDigest = class extends BaseClean {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, extend(true, {}, Default, ...configs))\n  }\n}\n\nexport default CleanDigest\n","import Base from '../base'\n\nconst Recipes = class extends Base {\n\n  constructor(config = {debug: false}) {\n    super(config)\n  }\n\n  /**\n   * Prefer to return the taskFn instead of a string, but return the string if that's all that is given to us.\n   *\n   * @param recipe\n   * @returns {*}\n   */\n  toTask(recipe) {\n    let taskName = null\n    if (typeof recipe === \"string\") {\n      // any given task name should be returned as-is\n      taskName = recipe\n      this.debug(`toTask(): ${taskName}`)\n    }\n    else {\n      if (typeof recipe === \"function\") {\n        // any given fn should be return as-is i.e. series/parallel\n        taskName = recipe\n      }\n      else {\n        // any recipe should be converted to string task name\n        taskName = recipe.taskFn\n      }\n      this.debug(`toTask(): ${taskName.name || taskName.displayName}`)\n    }\n    return taskName\n  }\n\n  /**\n   * Yield the nearest set of task names - return nested series/parallel fn - do not follow them and flatten them (they will do that themselves if using the helper methods)\n   *\n   * @param recipes\n   * @returns {Array}\n   */\n  toTasks(recipes, tasks = []) {\n    this.debugDump('toTasks: recipes', recipes)\n\n    for (let recipe of recipes) {\n      //this.debugDump(`recipe taskName[${recipe.taskName? recipe.taskName() : ''}] isArray[${Array.isArray(recipe)}]`, recipe)\n      if (Array.isArray(recipe)) {\n        tasks.push(this.toTasks(recipe, []))\n      }\n      else {\n        let taskName = this.toTask(recipe)\n        tasks.push(taskName)\n      }\n    }\n\n    return tasks\n  }\n}\n\nexport default Recipes\n","import Recipes from './recipes'\n\n/**\n *\n * @param recipes - (recipes or task fns, or task names)\n */\nconst parallel = (gulp, ...recipes) => {\n   let parallel = gulp.parallel(new Recipes().toTasks(recipes))\n\n  // hack to attach the recipes for inspection by aggregate\n  parallel.recipes = recipes\n  return parallel\n}\n\nexport default parallel\n","import Aggregate from './aggregate'\nimport Preset from './preset'\nimport CleanImages from './cleanImages'\nimport CleanStylesheets from './cleanStylesheets'\nimport CleanJavascripts from './cleanJavascripts'\nimport CleanDigest from './cleanDigest'\nimport parallel from './util/parallel'\n\nconst Default = {\n  debug: false,\n  watch: false,\n  presetType: 'macro',\n  task: {\n    name: 'clean',\n    description: 'Cleans images, stylesheets, and javascripts.'\n  }\n}\n\nconst Clean = class extends Aggregate {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    let config = Preset.resolveConfig(preset, Default, ...configs)\n    let recipes = parallel(gulp,\n      new CleanImages(gulp, preset, ...configs),\n      new CleanStylesheets(gulp, preset, ...configs),\n      new CleanJavascripts(gulp, preset, ...configs),\n      new CleanDigest(gulp, preset, ...configs)\n    )\n\n    super(gulp, config.task.name, recipes, config)\n  }\n}\n\nexport default Clean\n","import BaseRecipe from './baseRecipe'\nimport BrowserSync from 'browser-sync'\nimport debug from 'gulp-debug'\nimport extend from 'extend'\nimport gulpif from 'gulp-if'\nimport rev   from 'gulp-rev'\n\nexport const Default = {\n  debug: false,\n  presetType: 'postProcessor',\n  task: {\n    name: 'rev'\n  },\n  watch: {\n    glob: ['**', '!digest', '!digest/**', '!*.map'],\n    options: {\n      //cwd: ** resolved from preset **\n    }\n  },\n  source: {\n    glob: ['**', '!digest', '!digest/**', '!*.map'],\n    options: {\n      //cwd: ** resolved from preset **\n    }\n  },\n  options: {}\n}\n\nconst Rev = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, extend(true, {}, Default, ...configs))\n    this.browserSync = BrowserSync.create()\n  }\n\n  createDescription() {\n    return `Adds revision digest to assets from ${this.config.source.options.cwd}/${this.config.source.glob}`\n  }\n\n  run(done, watching = false) {\n\n    // FIXME merge in the clean as a task\n\n\n    return this.gulp.src(this.config.source.glob, this.config.source.options)\n      //.pipe(changed(this.config.dest)) // ignore unchanged files\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(rev(this.config.options))\n      .pipe(this.gulp.dest(this.config.dest))\n      .pipe(rev.manifest())\n      .pipe(this.gulp.dest(this.config.dest))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n      .pipe(this.browserSync.stream())\n\n  }\n}\n\nexport default Rev\n","import BaseRecipe from './baseRecipe'\nimport BrowserSync from 'browser-sync'\nimport debug from 'gulp-debug'\nimport extend from 'extend'\nimport gulpif from 'gulp-if'\nimport cssnano from 'gulp-cssnano'\nimport extReplace from 'gulp-ext-replace'\n\nexport const Default = {\n  debug: false,\n  presetType: 'postProcessor',\n  task: {\n    name: 'cssNano'\n  },\n  watch: {\n    glob: ['**/*.css'],\n    options: {\n      //cwd: ** resolved from preset **\n    }\n  },\n  source: {\n    glob: ['**/*.css', '!**/*.min.css'],\n    options: {\n      //cwd: ** resolved from preset **\n    }\n  },\n  options: {\n    //autoprefixer: false // assume this is done with Sass recipe\n  }\n}\n\n/**\n * Recipe to be run after Rev or any other that places final assets in the digest destination directory\n */\nconst CssNano = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, extend(true, {}, Default, ...configs))\n    this.browserSync = BrowserSync.create()\n  }\n\n  createDescription() {\n    return `Minifies digest css from ${this.config.source.options.cwd}/${this.config.source.glob}`\n  }\n\n  run(done, watching = false) {\n\n    return this.gulp.src(this.config.source.glob, this.config.source.options)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(extReplace('.min.css'))\n      .pipe(cssnano(this.config.options))\n      .pipe(this.gulp.dest(this.config.dest))\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n      .pipe(this.browserSync.stream())\n  }\n}\n\nexport default CssNano\n","import BaseRecipe from './baseRecipe'\nimport Preset from './preset'\nimport extend from 'extend'\nimport mocha from 'gulp-mocha'\nimport debug from 'gulp-debug'\nimport gulpif from 'gulp-if'\n\nexport const Default = {\n  debug: false,\n  presetType: 'javascripts',\n  task: {\n    name: 'mocha'\n  },\n  options: {}\n}\n\nconst Mocha = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param preset - base preset configuration - either one from preset.js or a custom hash\n   * @param configs - customized overrides for this recipe\n   */\n  constructor(gulp, preset, ...configs) {\n    // resolve watch cwd based on test cwd\n    super(gulp, preset, extend(true, {},\n      Default,\n      {watch: {options: {cwd: Preset.resolveConfig(preset, Default, ...configs).test.options.cwd}}},\n      ...configs))\n  }\n\n  createDescription() {\n    return `Tests ${this.config.test.options.cwd}/${this.config.test.glob}`\n  }\n\n  run(done, watching = false) {\n    let bundle = this.gulp.src(this.config.test.glob, this.config.test.options)\n      .pipe(gulpif(this.config.debug, debug(this.debugOptions())))\n      .pipe(mocha({reporter: 'nyan'})) // gulp-mocha needs filepaths so you can't have any plugins before it\n      .on('error', (error) => {\n        this.notifyError(error, done, watching)\n      })\n\n    return bundle\n  }\n}\n\nexport default Mocha\n","import BaseRecipe from './baseRecipe'\nimport extend from 'extend'\n\n/**\n *  This is the base for publish recipes using BuildControl\n */\nexport const Default = {\n\n  dir: 'build', // directory to assemble the files - make sure to add this to your .gitignore so you don't publish this to your source branch\n  source: {\n    types: ['javascripts', 'stylesheets'], // source types to resolve from preset and copy into the build directory pushing to the dist branch\n    files: ['package.json', 'bower.json', 'LICENSE*', 'dist'] // any additional file patterns to copy to `dir`\n  },\n  watch: false,\n  presetType: 'macro',\n  options: { // see https://github.com/alienfast/build-control/blob/master/src/buildControl.js#L11\n    //cwd: 'build', // Uses recipe's dir\n    branch: 'dist',\n    tag: {\n      existsFailure: false\n    },\n    clean: {\n      before: true,\n      after: false\n    }\n  }\n}\n\nconst BasePublish = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n\n    // use the dir as the cwd to the BuildControl class\n    this.config.options = extend(true, {debug: this.config.debug, cwd: this.config.dir}, this.config.options)\n  }\n}\n\nexport default BasePublish\n","import BasePublish from './basePublish'\nimport {BuildControl} from 'build-control'\nimport extend from 'extend'\n\nconst Default = {\n  task: {\n    name: 'prepublish',\n    description: 'Checks tag name and ensures directory has all files committed.'\n  },\n  options: {\n    tag: {\n      existsFailure: true\n    }\n  }\n}\n\n/**\n *  This recipe will run a preflight check on publishing to ensure tag name and commits are ready to go.\n *\n *  Run this before long running tests to error your build quickly.\n */\nconst Prepublish = class extends BasePublish {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, extend(true, {}, Default, ...configs))\n  }\n\n  run(done) {\n    let buildControl = new BuildControl(this.config.options)\n    buildControl.prepublishCheck()\n\n    this.donezo(done)\n  }\n}\n\nexport default Prepublish\n","import BasePublish from './basePublish'\nimport {BuildControl} from 'build-control'\nimport fs from 'fs-extra'\nimport path from 'path'\nimport process from 'process'\nimport pathIsAbsolute from 'path-is-absolute'\nimport glob from 'glob'\n\n\n/**\n *  This recipe will keep your source branch clean but allow you to easily push your\n *  dist files to a separate branch, all while keeping track of the origin commits.\n *\n *  Did I mention it will autotag based on your package.json?\n *\n *  Typically, your build tools put compiled files in dist.  A clean build packages typically needs to consist of\n *  1. package metadata - package.json or bower.json\n *  2. license\n *  3. compiled dist files\n *  4. source files - Javascript ES projects, as well as SCSS libraries for example need to publish source\n *\n *  To keep your source branch clean with this recipe's default configuration, add the following to .gitignore:\n *  - build\n *  - dist\n *\n *  Run this recipe, it will delete/create the `build` dir, copy the files above, and commit/push (changes from remote)\n *  to the `dist` branch.  Now you have clean separation of source and dist.\n *\n *  Have long running maintenance on an old version?  Publish to a different dist branch like { options: {branch: 'dist-v3'} }\n */\nconst Default = {\n  //debug: true,\n  npm: {\n    bump: true,\n    publish: true\n  },\n  readme: {\n    enabled: true,\n    name: 'README.md',\n    template: `# %sourceName%\n\n%sourceTagLink% built from commit %sourceCommitLink% on branch \\`%sourceBranch%\\`. See the [README](../..) for more details\n\n---\n<sup>Built and published by [gulp-pipeline](https://github.com/alienfast/gulp-pipeline) using [build-control](https://github.com/alienfast/build-control)</sup>\n`\n  },\n  task: {\n    name: 'publishBuild',\n    description: 'Assembles and pushes the build to a branch'\n  }\n}\n\nconst PublishBuild = class extends BasePublish {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  run(done) {\n    let buildControl = new BuildControl(this.config.options)\n\n    // bump the version and commit to git\n    if(this.config.npm.bump) {\n      buildControl.npm.bump()\n    }\n\n    this.prepareBuildFiles()\n\n    this.generateReadme(buildControl)\n\n    // run the commit/tagging/pushing\n    buildControl.run()\n\n    // publish to npm\n    if(this.config.npm.publish) {\n      buildControl.npm.publish()\n    }\n\n    done()\n  }\n\n  generateReadme(buildControl) {\n    // generate a readme on the branch if one is not copied in.\n    if (this.config.readme.enabled) {\n      let readme = path.join(this.config.dir, this.config.readme.name)\n      if (fs.existsSync(readme)) {\n        this.log(`Found readme at ${readme}.  Will not generate a new one from the template.  Turn this message off with { readme: {enabled: false} }`)\n      }\n      else {\n        fs.writeFileSync(readme, buildControl.interpolate(this.config.readme.template))\n      }\n    }\n  }\n\n  /**\n   * Copy all the configured sources to the config.dir directory\n   */\n  prepareBuildFiles() {\n    let buildDir = this.config.dir\n    this.debug(`Using build directory: ${buildDir}`)\n\n    // copy preset type files\n    for (let type of this.config.source.types) {  // defaulted in BasePublish\n      let typePreset = this.preset[type]\n\n      this.log(`Copying ${typePreset.source.options.cwd}/${typePreset.source.all}...`)\n      for (let name of glob.sync(typePreset.source.all, typePreset.source.options)) {\n        let from = path.join(typePreset.source.options.cwd, name)\n        let to = path.join(buildDir, from)\n        this.log(`\\t...to ${to}`)\n        fs.copySync(from, to)\n      }\n    }\n\n    // copy any additional configured files\n    for (let fileGlob of this.config.source.files) { // defaulted in BasePublish\n\n      this.log(`Copying ${fileGlob}...`)\n      for (let fromFullPath of glob.sync(fileGlob, {realpath: true})) {\n        let from = path.relative(process.cwd(), fromFullPath)\n        let to = path.join(buildDir, from)\n        this.log(`\\t...to ${to}`)\n        fs.copySync(from, to)\n      }\n    }\n  }\n\n  resolvePath(cwd, base = process.cwd()) {\n    if (!pathIsAbsolute(cwd)) {\n      return path.join(base, cwd)\n    }\n    else {\n      return cwd\n    }\n  }\n}\n\nexport default PublishBuild\n","import BasePublish from './basePublish'\nimport {Npm} from 'build-control'\n\nconst Default = {\n  task: {\n    name: 'publishNpm',\n    description: 'Publishes package on npm'\n  },\n  options: {}\n}\n\n/**\n *  This recipe will run execute `npm publish` with no other checks.\n *\n *  @see also PublishBuild - it will bump, publish build, and publish npm (all in one)\n */\nconst PublishNpm = class extends BasePublish {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  run(done) {\n    let npm = new Npm(this.config.options)\n    npm.publish()\n    this.donezo(done)\n  }\n}\n\nexport default PublishNpm\n","import BasePublish from './basePublish'\nimport {BuildControl} from 'build-control'\n\n\n/**\n *  This recipe will keep your source branch clean but allow you to easily push your\n *  _gh_pages files to the gh-pages branch.\n */\nconst Default = {\n  //debug: true,\n  task: {\n    name: 'publishGhPages',\n    description: 'Publishes a _gh_pages directory to gh-pages branch'\n  },\n  options: {\n    cwd: '_gh_pages',\n    branch: 'gh-pages',\n    tag: false, // no tagging on gh-pages push\n    clean: { // no cleaning of cwd, it is built externally\n      before: false,\n      after: true  // we create a git repo, and without cleaning, subsequent runs will fail with \"uncommitted changes\"\n    }\n  }\n}\n\nconst PublishGhPages = class extends BasePublish {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  run(done) {\n    let buildControl = new BuildControl(this.config.options)\n\n    // run the commit/tagging/pushing\n    buildControl.run()\n\n    done()\n  }\n}\n\nexport default PublishGhPages\n","import BaseRecipe from './baseRecipe'\nimport tmp from 'tmp'\nimport fs from 'fs-extra'\nimport process from 'process'\nimport Ruby from './ruby/ruby'\n\nconst Default = {\n  watch: false,\n  presetType: 'macro',\n  task: {\n    name: 'jekyll',\n    description: 'Builds a jekyll site'\n  },\n  cwd: process.cwd(),\n  options: {\n    baseCommand: 'bundle exec',\n    config: '_config.yml',\n    incremental: false,\n    raw: undefined // 'baseurl: \"/bootstrap-material-design\"'\n  }\n}\n\nconst Jekyll = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, ...configs) {\n    super(gulp, preset, Default, ...configs)\n  }\n\n  run(done) {\n    let config = `--config ${this.config.options.config}`\n\n    let rawConfigFile = this.rawConfig()\n\n    // If raw is specified, add the temporary config file to the list of configs passed into the jekyll command\n    if (rawConfigFile) {\n      config += `,${rawConfigFile}`\n    }\n\n    this.exec(`${Ruby.localPath(('rubyRunner.sh'))} ${this.config.options.baseCommand} jekyll build ${config}`)\n\n    this.donezo(done)\n  }\n\n  // Create temporary config file if needed\n  rawConfig() {\n    if (this.config.options.raw) {\n      // Tmp file is only available within the context of this function\n      let tmpFile = tmp.fileSync({prefix: '_config.', postfix: '.yml'})\n\n      // Write raw to file\n      fs.writeFileSync(tmpFile.name, this.config.options.raw)\n\n      // return the file path\n      return tmpFile.name\n    }\n    else {\n      return null\n    }\n  }\n}\n\nexport default Jekyll\n","import Recipes from './recipes'\n\n/**\n *\n * @param recipes - (recipes or task fns, or task names)\n */\nconst series = (gulp, ...recipes) => {\n  let series = gulp.series(new Recipes().toTasks(recipes))\n\n  // hack to attach the recipes for inspection by aggregate\n  series.recipes = recipes\n  return series\n}\n\nexport default series\n","import BaseRecipe from './baseRecipe'\n\nconst Default = {\n  debug: false,\n  watch: false,\n  presetType: 'macro',\n  task: false\n}\n\n/**\n * Sleep the given ms value.\n */\nconst Sleep = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp - gulp instance\n   * @param config - customized overrides\n   */\n  constructor(gulp, preset, sleep) {\n    super(gulp, preset, Default, {sleep: sleep})\n  }\n\n  createDescription(){\n    return `Sleeps for ${this.config.sleep} milliseconds.`\n  }\n\n  run(done) {\n    setTimeout(() => { // eslint-disable-line no-undef\n      this.donezo(done)\n    }, this.config.sleep)\n  }\n}\n\nexport default Sleep\n"],"names":["Default","node_modules","rollup","fs","Buffer","buildControl","BuildControl","Npm"],"mappings":"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"}