{"version":3,"file":"gulp-pipeline.cjs.js","sources":["../src/base.js","../src/baseRecipe.js","../src/autoprefixer.js","../src/eslint.js","../src/browserify.js","../src/sass.js","../src/scssLint.js","../src/taskSequence.js"],"sourcesContent":["import extend from 'extend'\nimport Util from 'gulp-util'\nimport notify from 'gulp-notify'\n\nexport const Default = {\n  watch: true,\n  debug: false\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst Base = class {\n\n  /**\n   *\n   * @param gulp\n   * @param config\n   */\n  constructor(gulp, config) {\n    this.gulp = gulp\n    this.config = extend(true, {}, Default, config)\n  }\n\n  // ----------------------------------------------\n  // protected\n  log(msg) {\n    Util.log(msg)\n  }\n\n  debug(msg) {\n    if (this.config.debug) {\n      this.log(msg)\n    }\n  }\n\n  notifyError(error) {\n    let lineNumber = (error.lineNumber) ? `Line ${error.lineNumber} -- ` : ''\n\n    notify({\n      title: `Task [${this.taskName()}] Failed in [${error.plugin}]`,\n      message: `${lineNumber}See console.`,\n      sound: 'Sosumi' // See: https://github.com/mikaelbr/node-notifier#all-notification-options-with-their-defaults\n    }).write(error)\n\n    let tag = Util.colors.black.bgRed\n    let report = `\n\n${tag('    Task:')} [${Util.colors.cyan(this.taskName())}]\n${tag('  Plugin:')} [${error.plugin}]\n${tag('   Error:')}\n${error.message}`\n\n    if (error.lineNumber) {\n      report += `${tag('    Line:')} ${error.lineNumber}\\n`\n    }\n    if (error.fileName)   {\n      report += `${tag('    File:')} ${error.fileName}\\n`\n    }\n    this.log(report)\n\n    // Prevent the 'watch' task from stopping\n    this.gulp.emit('end')\n  }\n\n  // ----------------------------------------------\n  // private\n\n  // ----------------------------------------------\n  // static\n\n}\n\nexport default Base\n","import Base from './base'\nimport extend from 'extend'\nimport Util from 'gulp-util'\n\nexport const Default = {\n  watch: true,\n  debug: false\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst BaseRecipe = class extends Base {\n\n  /**\n   *\n   * @param gulp\n   * @param config\n   */\n  constructor(gulp, config) {\n    super(gulp, extend(true, {}, Default, config))\n\n    if (this.config.task) {\n      // generate primary task e.g. sass\n      let name = this.taskName()\n      this.debug(`Registering task: ${Util.colors.green(name)}`)\n      this.gulp.task(name, () => {\n        this.run()\n      })\n    }\n\n    if (this.config.watch) {\n      // generate watch task e.g. sass:watch\n      let name = this.watchTaskName()\n      this.debug(`Registering task: ${Util.colors.green(name)}`)\n      this.gulp.task(name, () => {\n        this.watch()\n      })\n    }\n  }\n\n  taskName() {\n    return this.config.task.name || this.constructor.name // guarantee something is present for error messages\n  }\n\n  watchTaskName() {\n    if (this.config.watch && this.config.watch.name) {\n      return this.config.watch.name\n    }\n    else {\n      return `${this.taskName()}:watch`\n    }\n  }\n\n  watch() {\n    this.gulp.watch(this.config.watch.glob, [this.taskName()])\n  }\n\n  // ----------------------------------------------\n  // protected\n\n  // ----------------------------------------------\n  // private\n\n  // ----------------------------------------------\n  // static\n\n}\n\nexport default BaseRecipe\n","import BaseRecipe from './baseRecipe'\nimport autoprefixer from 'gulp-autoprefixer'\nimport extend from 'extend'\n\nexport const Default = {\n  options: {  // from bootstrap\n    browsers: [\n      //\n      // Official browser support policy:\n      // http://v4-alpha.getbootstrap.com/getting-started/browsers-devices/#supported-browsers\n      //\n      'Chrome >= 35', // Exact version number here is kinda arbitrary\n      // Rather than using Autoprefixer's native \"Firefox ESR\" version specifier string,\n      // we deliberately hardcode the number. This is to avoid unwittingly severely breaking the previous ESR in the event that:\n      // (a) we happen to ship a new Bootstrap release soon after the release of a new ESR,\n      //     such that folks haven't yet had a reasonable amount of time to upgrade; and\n      // (b) the new ESR has unprefixed CSS properties/values whose absence would severely break webpages\n      //     (e.g. `box-sizing`, as opposed to `background: linear-gradient(...)`).\n      //     Since they've been unprefixed, Autoprefixer will stop prefixing them,\n      //     thus causing them to not work in the previous ESR (where the prefixes were required).\n      'Firefox >= 31', // Current Firefox Extended Support Release (ESR)\n      // Note: Edge versions in Autoprefixer & Can I Use refer to the EdgeHTML rendering engine version,\n      // NOT the Edge app version shown in Edge's \"About\" screen.\n      // For example, at the time of writing, Edge 20 on an up-to-date system uses EdgeHTML 12.\n      // See also https://github.com/Fyrd/caniuse/issues/1928\n      'Edge >= 12',\n      'Explorer >= 9',\n      // Out of leniency, we prefix these 1 version further back than the official policy.\n      'iOS >= 8',\n      'Safari >= 8',\n      // The following remain NOT officially supported, but we're lenient and include their prefixes to avoid severely breaking in them.\n      'Android 2.3',\n      'Android >= 4',\n      'Opera >= 12'\n    ]\n  }\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst Autoprefixer = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp\n   * @param config\n   */\n  constructor(gulp, config = {}) {\n    super(gulp, extend(true, {}, Default, config))\n  }\n\n  run() {\n    // FIXME: is this right or wrong?  this class initially was extracted for reuse of Default options\n    return this.gulp.src(this.config.source)\n      .pipe(autoprefixer(this.config.options))\n      .pipe(this.gulp.dest(this.config.dest))\n  }\n\n  // ----------------------------------------------\n  // protected\n\n  // ----------------------------------------------\n  // private\n\n  // ----------------------------------------------\n  // static\n\n}\n\nexport default Autoprefixer\n","import BaseRecipe from './baseRecipe'\nimport eslint from 'gulp-eslint'\nimport extend from 'extend'\nimport jscs from 'gulp-jscs'\nimport stylish from 'gulp-jscs-stylish'\n\nexport const Default = {\n  task: {\n    name: 'eslint'\n  },\n  options: {}\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst EsLint = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp\n   * @param config\n   */\n  constructor(gulp, config = {}) {\n    super(gulp, extend(true, {}, Default, config))\n  }\n\n  run() {\n    return this.gulp.src(this.config.source)\n      // eslint() attaches the lint output to the \"eslint\" property of the file object so it can be used by other modules.\n      .pipe(eslint(this.config.options))\n      // eslint.format() outputs the lint results to the console. Alternatively use eslint.formatEach() (see Docs).\n      .pipe(eslint.format())\n      // To have the process exit with an error code (1) on lint error, return the stream and pipe to failAfterError last.\n      .pipe(eslint.failAfterError())\n      .pipe(jscs())      // enforce style guide\n      .pipe(stylish())  // log style errors\n      //.pipe(jscs.reporter())\n      .pipe(jscs.reporter('fail')) // fail on error\n  }\n\n  // ----------------------------------------------\n  // protected\n\n  // ----------------------------------------------\n  // private\n\n  // ----------------------------------------------\n  // static\n\n}\n\nexport default EsLint\n","import BaseRecipe from './baseRecipe'\nimport EsLint from './eslint'\nimport BrowserSync from 'browser-sync'\nimport babelify from 'babelify'\nimport browserify from 'browserify'\nimport extend from 'extend'\nimport source from 'vinyl-source-stream'\nimport watchify from 'watchify'\nimport Util from 'gulp-util'\n\n// TODO: sourcemaps\n\nexport const Default = {\n  task: {\n    name: 'browserify'\n  },\n  watch: {\n    glob: './app/assets/javascripts/**/*.js'\n  },\n  source: './app/assets/javascripts/index.js',\n  dest: './public/assets',\n  options: {\n    debug: true\n  }\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst Browserify = class extends BaseRecipe {\n  static get Default() {\n    return {}\n  }\n\n  /**\n   *\n   * @param gulp\n   * @param config\n   */\n  constructor(gulp, config = {}) {\n    super(gulp, extend(true, {}, Default, config))\n\n    // add the source to the browserify entries if unspecified - do this after initial config is merged\n    this.config = extend(true,\n      {browserify: {entries: this.config.source}}, // default\n      this.config // override if passed in\n    )\n\n    this.browserSync = BrowserSync.create()\n    this.bundler = watchify(browserify(this.config.options).transform(babelify))\n  }\n\n  run() {\n    new EsLint(this.gulp, {source: this.config.source}).run()\n    this.bundler.bundle()\n      .on('error', Util.log.bind(Util, 'Browserify Error'))\n      .pipe(source('index.js'))\n      .pipe(this.gulp.dest(this.config.dest))\n      .pipe(this.browserSync.stream())\n  }\n\n  watch() {\n    this.bundler.on('update', () => {\n      console.log(\"Recompiling JS...\")\n      this.run()\n    })\n  }\n\n  // ----------------------------------------------\n  // protected\n\n  // ----------------------------------------------\n  // private\n\n  // ----------------------------------------------\n  // static\n\n}\n\nexport default Browserify\n","import BaseRecipe from './baseRecipe'\nimport { Default as AutoprefixerDefault } from './autoprefixer'\nimport autoprefixer from 'gulp-autoprefixer'\nimport BrowserSync from 'browser-sync'\nimport debug from 'gulp-debug'\nimport extend from 'extend'\nimport sass from 'gulp-sass'\nimport sourcemaps from 'gulp-sourcemaps'\nimport Util from 'gulp-util'\n\n\n// TODO: scsslint\n\nexport const Default = {\n  debug: true,\n  task: {\n    name: 'sass'\n  },\n  watch: {\n    glob: './app/assets/stylesheets/**/*.scss'\n  },\n  source: './app/assets/stylesheets/application.scss',\n  dest: 'public/stylesheets',\n  options: {\n    indentedSyntax: true,\n    errLogToConsole: false,\n    includePaths: ['node_modules']\n  },\n  // capture defaults from autoprefixer class\n  autoprefixer: {\n    options: AutoprefixerDefault.options\n  }\n}\n\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst Sass = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp\n   * @param config\n   */\n  constructor(gulp, config = {}) {\n    super(gulp, extend(true, {}, Default, config))\n    this.browserSync = BrowserSync.create()\n  }\n\n  run() {\n    let bundle = this.gulp.src(this.config.source)\n\n    if (this.config.debug) {\n      bundle.pipe(debug())\n    }\n\n    bundle\n      .pipe(sourcemaps.init())\n      .pipe(sass(this.config.options))\n      .on('error', (error) => {\n        this.notifyError(error)\n      })\n      .pipe(autoprefixer(this.config.autoprefixer.options))\n      .pipe(sourcemaps.write())\n      .pipe(this.gulp.dest(this.config.dest))\n      .pipe(this.browserSync.stream())\n\n    return bundle\n  }\n\n  // ----------------------------------------------\n  // protected\n\n  // ----------------------------------------------\n  // private\n\n  // ----------------------------------------------\n  // static\n\n}\n\nexport default Sass\n","import BaseRecipe from './baseRecipe'\nimport extend from 'extend'\nimport scssLint from 'gulp-scss-lint'\nimport scssLintStylish from 'gulp-scss-lint-stylish'\n\nexport const Default = {\n  debug: true,\n  task: {\n    name: 'scsslint'\n  },\n  watch: {\n    glob: './app/assets/stylesheets/**/*.scss'\n  },\n  source: './app/assets/stylesheets/**/*.scss',\n  options: {\n    customReport: scssLintStylish\n  }\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst ScssLint = class extends BaseRecipe {\n\n  /**\n   *\n   * @param gulp\n   * @param config\n   */\n  constructor(gulp, config = {}) {\n    super(gulp, extend(true, {}, Default, config))\n  }\n\n  run() {\n    return this.gulp.src(this.config.source)\n      .pipe(scssLint(this.config.options))\n\n  }\n\n  // ----------------------------------------------\n  // protected\n\n  // ----------------------------------------------\n  // private\n\n  // ----------------------------------------------\n  // static\n\n}\n\nexport default ScssLint\n","import Base from './base'\nimport extend from 'extend'\nimport Util from 'gulp-util'\n\nexport const Default = {\n  watch: false\n}\n\n/**\n * ----------------------------------------------\n * Class Definition\n * ----------------------------------------------\n */\nconst TaskSequence = class extends Base {\n\n  /**\n   *\n   * @param gulp\n   * @param config\n   */\n  constructor(gulp, taskName, recipes, config = {}) {\n    super(gulp, extend(true, {}, Default, config))\n\n    // generate the task sequence\n    let tasks = []\n    for (let recipe of recipes) {\n      if (this.config.watch) {\n        tasks.push(recipe.watchTaskName())\n      } else {\n        tasks.push(recipe.taskName())\n      }\n    }\n\n    this.debug(`Registering task: ${Util.colors.green(taskName)}`)\n    this.gulp.task(taskName, tasks)\n  }\n\n\n  // ----------------------------------------------\n  // protected\n\n  // ----------------------------------------------\n  // private\n\n  // ----------------------------------------------\n  // static\n\n}\n\nexport default TaskSequence\n"],"names":["Default"],"mappings":"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"}