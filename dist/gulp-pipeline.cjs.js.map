{"version":3,"file":"gulp-pipeline.cjs.js","sources":["../src/baseRecipe.js","../src/eslint.js","../src/browserify.js","../src/scss.js"],"sourcesContent":["import extend from 'extend'\n\nconst BaseRecipe = (() => {\n\n  const Default = {\n    register: true,\n    watch: true\n  }\n\n  /**\n   * ----------------------------------------------\n   * Class Definition\n   * ----------------------------------------------\n   */\n  class Base {\n\n    /**\n     *\n     * @param gulp\n     * @param config\n     */\n    constructor(gulp, config) {\n      this.gulp = gulp\n      this.config = extend(true, {}, Default, config)\n\n      if(this.config.register) {\n        this.registerTasks()\n      }\n    }\n\n    taskName() {\n      return this.config.task\n    }\n\n    watchTaskName() {\n      return `${this.taskName()}:watch`\n    }\n\n    registerTasks() {\n      // generate primary task e.g. sass\n      this.gulp.task(this.taskName(), () => {\n        this.run()\n      })\n\n      if (this.config.watch) {\n        // generate watch task e.g. sass:watch\n        this.gulp.task(this.watchTaskName(), () => {\n          this.watch()\n        })\n      }\n    }\n\n    watch() {\n      this.gulp.watch(this.config.watch, [this.taskName()])\n    }\n\n    // ----------------------------------------------\n    // protected\n\n    // ----------------------------------------------\n    // private\n\n    // ----------------------------------------------\n    // static\n\n  }\n\n  return Base\n\n})()\n\nexport default BaseRecipe\n","import BaseRecipe from './baseRecipe'\nimport eslint from 'gulp-eslint'\nimport extend from 'extend'\nimport jscs from 'gulp-jscs'\nimport stylish from 'gulp-jscs-stylish'\n\nconst EsLint = (() => {\n\n  const Default = {\n    task: 'eslint',\n    options: {}\n  }\n\n  /**\n   * ----------------------------------------------\n   * Class Definition\n   * ----------------------------------------------\n   */\n  class EsLint extends BaseRecipe {\n\n    /**\n     *\n     * @param gulp\n     * @param config\n     */\n    constructor(gulp, config = {}) {\n      super(gulp, extend(true, {}, Default, config))\n    }\n\n    run() {\n      return this.gulp.src(this.config.source)\n        // eslint() attaches the lint output to the \"eslint\" property of the file object so it can be used by other modules.\n        .pipe(eslint(this.config.options))\n        // eslint.format() outputs the lint results to the console. Alternatively use eslint.formatEach() (see Docs).\n        .pipe(eslint.format())\n        // To have the process exit with an error code (1) on lint error, return the stream and pipe to failAfterError last.\n        .pipe(eslint.failAfterError())\n        .pipe(jscs())      // enforce style guide\n        .pipe(stylish())  // log style errors\n        //.pipe(jscs.reporter())\n        .pipe(jscs.reporter('fail')) // fail on error\n    }\n\n    // ----------------------------------------------\n    // protected\n\n    // ----------------------------------------------\n    // private\n\n    // ----------------------------------------------\n    // static\n\n  }\n\n  return EsLint\n\n})()\n\nexport default EsLint\n","import BaseRecipe from './baseRecipe'\nimport EsLint from './eslint'\nimport BrowserSync from 'browser-sync'\nimport babelify from 'babelify'\nimport browserify from 'browserify'\nimport extend from 'extend'\nimport source from 'vinyl-source-stream'\nimport watchify from 'watchify'\nimport util from 'gulp-util'\n\n// TODO: sourcemaps\n\nconst Browserify = (() => {\n\n  const Default = {\n    task: 'browserify',\n    watch: './app/assets/javascripts/**/*.js',\n    source: './app/assets/javascripts/index.js',\n    dest: './public/assets',\n    browserify: {\n      options: {\n        debug: true\n      }\n    }\n  }\n\n  /**\n   * ----------------------------------------------\n   * Class Definition\n   * ----------------------------------------------\n   */\n  class Browserify extends BaseRecipe {\n\n    /**\n     *\n     * @param gulp\n     * @param config\n     */\n    constructor(gulp, config = {}) {\n      super(gulp, extend(true, {}, Default, config))\n\n      // add the source to the browserify entries if unspecified - do this after initial config is merged\n      this.config = extend(true,\n        {browserify: {entries: this.config.source}}, // default\n        this.config // override if passed in\n      )\n\n      this.browserSync = BrowserSync.create()\n      this.bundler = watchify(browserify(this.config.browserify.options).transform(babelify))\n    }\n\n    run() {\n      new EsLint(this.gulp, {source: this.config.source}).run()\n      this.bundler.bundle()\n        .on('error', util.log.bind(util, 'Browserify Error'))\n        .pipe(source('index.js'))\n        .pipe(this.gulp.dest(this.config.dest))\n        .pipe(this.browserSync.stream())\n    }\n\n    watch() {\n      this.bundler.on('update', () => {\n        console.log(\"Recompiling JS...\")\n        this.run()\n      })\n    }\n\n    // ----------------------------------------------\n    // protected\n\n    // ----------------------------------------------\n    // private\n\n    // ----------------------------------------------\n    // static\n\n  }\n\n  return Browserify\n\n})()\n\nexport default Browserify\n","import BaseRecipe from './baseRecipe'\nimport autoprefixer from 'gulp-autoprefixer'\nimport extend from 'extend'\nimport sass from 'gulp-sass'\nimport sourcemaps from 'gulp-sourcemaps'\nimport BrowserSync from 'browser-sync'\n\n// TODO: scsslint\n\nconst Scss = (() => {\n\n  const Default = {\n    task: 'scss',\n    watch: './app/assets/stylesheets/**/*.scss',\n    source: './app/assets/stylesheets/application.scss',\n    dest: 'public/stylesheets',\n    options: {\n      indentedSyntax: true,\n      errLogToConsole: true,\n      includePaths: ['node_modules']\n    },\n    autoprefixer: {\n      options: {  // from bootstrap\n        browsers: [\n          //\n          // Official browser support policy:\n          // http://v4-alpha.getbootstrap.com/getting-started/browsers-devices/#supported-browsers\n          //\n          'Chrome >= 35', // Exact version number here is kinda arbitrary\n          // Rather than using Autoprefixer's native \"Firefox ESR\" version specifier string,\n          // we deliberately hardcode the number. This is to avoid unwittingly severely breaking the previous ESR in the event that:\n          // (a) we happen to ship a new Bootstrap release soon after the release of a new ESR,\n          //     such that folks haven't yet had a reasonable amount of time to upgrade; and\n          // (b) the new ESR has unprefixed CSS properties/values whose absence would severely break webpages\n          //     (e.g. `box-sizing`, as opposed to `background: linear-gradient(...)`).\n          //     Since they've been unprefixed, Autoprefixer will stop prefixing them,\n          //     thus causing them to not work in the previous ESR (where the prefixes were required).\n          'Firefox >= 31', // Current Firefox Extended Support Release (ESR)\n          // Note: Edge versions in Autoprefixer & Can I Use refer to the EdgeHTML rendering engine version,\n          // NOT the Edge app version shown in Edge's \"About\" screen.\n          // For example, at the time of writing, Edge 20 on an up-to-date system uses EdgeHTML 12.\n          // See also https://github.com/Fyrd/caniuse/issues/1928\n          'Edge >= 12',\n          'Explorer >= 9',\n          // Out of leniency, we prefix these 1 version further back than the official policy.\n          'iOS >= 8',\n          'Safari >= 8',\n          // The following remain NOT officially supported, but we're lenient and include their prefixes to avoid severely breaking in them.\n          'Android 2.3',\n          'Android >= 4',\n          'Opera >= 12'\n        ]\n      }\n    }\n  }\n\n  /**\n   * ----------------------------------------------\n   * Class Definition\n   * ----------------------------------------------\n   */\n  class Scss extends BaseRecipe {\n\n    /**\n     *\n     * @param gulp\n     * @param config\n     */\n    constructor(gulp, config = {}) {\n      super(gulp, extend(true, {}, Default, config))\n      this.browserSync = BrowserSync.create()\n    }\n\n    run() {\n      return this.gulp.src(this.config.source)\n        .pipe(sourcemaps.init())\n        .pipe(sass(this.config.options))\n        .pipe(sourcemaps.write())\n        .pipe(autoprefixer(this.config.autoprefixer.options))\n        .pipe(this.gulp.dest(this.config.dest))\n        .pipe(this.browserSync.stream())\n    }\n\n    // ----------------------------------------------\n    // protected\n\n    // ----------------------------------------------\n    // private\n\n    // ----------------------------------------------\n    // static\n\n  }\n\n  return Scss\n\n})()\n\nexport default Scss\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAEA,MAAM,aAAa,CAAC,MAAM;;QAElB,UAAU;cACJ,IAAV;WACO,IAAP;GAFI;;;;;;;QAUA,IAAN,CAAW;;;;;;;gBAOG,IAAZ,EAAkB,MAAlB,EAA0B;WACnB,IAAL,GAAY,IAAZ,CADwB;WAEnB,MAAL,GAAc,OAAO,IAAP,EAAa,EAAb,EAAiB,OAAjB,EAA0B,MAA1B,CAAd,CAFwB;;UAIrB,KAAK,MAAL,CAAY,QAAZ,EAAsB;aAClB,aAAL,GADuB;OAAzB;KAJF;;eASW;aACF,KAAK,MAAL,CAAY,IAAZ,CADE;KAAX;;oBAIgB;aACP,CAAC,GAAE,KAAK,QAAL,EAAH,EAAmB,MAAnB,CAAP,CADc;KAAhB;;oBAIgB;;WAET,IAAL,CAAU,IAAV,CAAe,KAAK,QAAL,EAAf,EAAgC,MAAM;aAC/B,GAAL,GADoC;OAAN,CAAhC,CAFc;;UAMV,KAAK,MAAL,CAAY,KAAZ,EAAmB;;aAEhB,IAAL,CAAU,IAAV,CAAe,KAAK,aAAL,EAAf,EAAqC,MAAM;eACpC,KAAL,GADyC;SAAN,CAArC,CAFqB;OAAvB;KANF;;YAcQ;WACD,IAAL,CAAU,KAAV,CAAgB,KAAK,MAAL,CAAY,KAAZ,EAAmB,CAAC,KAAK,QAAL,EAAD,CAAnC,EADM;KAAR;;;;;;;;;;;GAtCF;;SAqDO,IAAP,CAjEwB;CAAN,CAAD,EAAb;;ACIN,MAAM,SAAS,CAAC,MAAM;;QAEd,UAAU;UACR,QAAN;aACS,EAAT;GAFI;;;;;;;QAUA,MAAN,SAAqB,UAArB,CAAgC;;;;;;;gBAOlB,IAAZ,EAAkB,SAAS,EAAT,EAAa;YACvB,IAAN,EAAY,OAAO,IAAP,EAAa,EAAb,EAAiB,OAAjB,EAA0B,MAA1B,CAAZ,EAD6B;KAA/B;;UAIM;aACG,KAAK,IAAL,CAAU,GAAV,CAAc,KAAK,MAAL,CAAY,MAAZ;;OAElB,IAFI,CAEC,OAAO,KAAK,MAAL,CAAY,OAAZ,CAFR;;OAIJ,IAJI,CAIC,OAAO,MAAP,EAJD;;OAMJ,IANI,CAMC,OAAO,cAAP,EAND,EAOJ,IAPI,CAOC,MAPD;OAQJ,IARI,CAQC,SARD;;OAUJ,IAVI,CAUC,KAAK,QAAL,CAAc,MAAd,CAVD,CAAP;KADF;;;;;;;;;;;GAXF;;SAoCO,MAAP,CAhDoB;CAAN,CAAD,EAAT;;;;ACMN,MAAM,aAAa,CAAC,MAAM;;QAElB,UAAU;UACR,YAAN;WACO,kCAAP;YACQ,mCAAR;UACM,iBAAN;gBACY;eACD;eACA,IAAP;OADF;KADF;GALI;;;;;;;QAiBA,UAAN,SAAyB,UAAzB,CAAoC;;;;;;;gBAOtB,IAAZ,EAAkB,SAAS,EAAT,EAAa;YACvB,IAAN,EAAY,OAAO,IAAP,EAAa,EAAb,EAAiB,OAAjB,EAA0B,MAA1B,CAAZ;;;UAGA,CAAK,MAAL,GAAc,OAAO,IAAP,EACZ,EAAC,YAAY,EAAC,SAAS,KAAK,MAAL,CAAY,MAAZ,EAAtB,EADW;WAEP,MAAL;OAFF,CAJ6B;;WASxB,WAAL,GAAmB,YAAY,MAAZ,EAAnB,CAT6B;WAUxB,OAAL,GAAe,SAAS,WAAW,KAAK,MAAL,CAAY,UAAZ,CAAuB,OAAvB,CAAX,CAA2C,SAA3C,CAAqD,QAArD,CAAT,CAAf,CAV6B;KAA/B;;UAaM;UACA,MAAJ,CAAW,KAAK,IAAL,EAAW,EAAC,QAAQ,KAAK,MAAL,CAAY,MAAZ,EAA/B,EAAoD,GAApD,GADI;WAEC,OAAL,CAAa,MAAb,GACG,EADH,CACM,OADN,EACe,KAAK,GAAL,CAAS,IAAT,CAAc,IAAd,EAAoB,kBAApB,CADf,EAEG,IAFH,CAEQ,OAAO,UAAP,CAFR,EAGG,IAHH,CAGQ,KAAK,IAAL,CAAU,IAAV,CAAe,KAAK,MAAL,CAAY,IAAZ,CAHvB,EAIG,IAJH,CAIQ,KAAK,WAAL,CAAiB,MAAjB,EAJR,EAFI;KAAN;;YASQ;WACD,OAAL,CAAa,EAAb,CAAgB,QAAhB,EAA0B,MAAM;gBACtB,GAAR,CAAY,mBAAZ,EAD8B;aAEzB,GAAL,GAF8B;OAAN,CAA1B,CADM;KAAR;;;;;;;;;;;GA7BF;;SA+CO,UAAP,CAlEwB;CAAN,CAAD,EAAb;;;;ACHN,MAAM,OAAO,CAAC,MAAM;;QAEZ,UAAU;UACR,MAAN;WACO,oCAAP;YACQ,2CAAR;UACM,oBAAN;aACS;sBACS,IAAhB;uBACiB,IAAjB;oBACc,CAAC,cAAD,CAAd;KAHF;kBAKc;eACH;kBACG;;;;;sBAAA;;;;;;;;;uBAAA;;;;;oBAAA,EAoBR,eApBQ;;kBAAA,EAuBR,aAvBQ;;qBAAA,EA0BR,cA1BQ,EA2BR,aA3BQ,CAAV;OADF;KADF;GAVI;;;;;;;QAkDA,IAAN,SAAmB,UAAnB,CAA8B;;;;;;;gBAOhB,IAAZ,EAAkB,SAAS,EAAT,EAAa;YACvB,IAAN,EAAY,OAAO,IAAP,EAAa,EAAb,EAAiB,OAAjB,EAA0B,MAA1B,CAAZ,EAD6B;WAExB,WAAL,GAAmB,YAAY,MAAZ,EAAnB,CAF6B;KAA/B;;UAKM;aACG,KAAK,IAAL,CAAU,GAAV,CAAc,KAAK,MAAL,CAAY,MAAZ,CAAd,CACJ,IADI,CACC,WAAW,IAAX,EADD,EAEJ,IAFI,CAEC,KAAK,KAAK,MAAL,CAAY,OAAZ,CAFN,EAGJ,IAHI,CAGC,WAAW,KAAX,EAHD,EAIJ,IAJI,CAIC,aAAa,KAAK,MAAL,CAAY,YAAZ,CAAyB,OAAzB,CAJd,EAKJ,IALI,CAKC,KAAK,IAAL,CAAU,IAAV,CAAe,KAAK,MAAL,CAAY,IAAZ,CALhB,EAMJ,IANI,CAMC,KAAK,WAAL,CAAiB,MAAjB,EAND,CAAP,CADI;KAAN;;;;;;;;;;;GAZF;;SAiCO,IAAP,CArFkB;CAAN,CAAD,EAAP;;;;"}